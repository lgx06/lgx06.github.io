{"meta":{"title":"lgx","subtitle":null,"description":null,"author":"lgx","url":"https://lgx06.github.io","root":"/"},"pages":[],"posts":[{"title":"蓝牙设备","slug":"蓝牙设备","date":"2020-09-19T07:12:31.000Z","updated":"2020-09-20T10:10:44.661Z","comments":true,"path":"2020/09/19/蓝牙设备/","link":"","permalink":"https://lgx06.github.io/2020/09/19/%E8%93%9D%E7%89%99%E8%AE%BE%E5%A4%87/","excerpt":"","text":"代码部分: COPY&lt;html&gt; &lt;head&gt; &lt;script&gt; var selected_device; &#x2F;&#x2F; 保存用户选择的蓝牙设备 var connected_server; &#x2F;&#x2F;在第二课基础上添加的变量，保存用户连接的蓝牙设备 var connected&#x3D;false; &#x2F;&#x2F;在第三课基础上添加的变量，保存电脑蓝牙的当前连接设备 function discoverDevices() &#123; console.log(&quot;discoverDevices&quot;); &#x2F;&#x2F;consol.log 控制台打印输出 var options &#x3D; &#123;acceptAllDevices:true&#125; &#x2F;&#x2F;发现所有周边蓝牙设备 navigator.bluetooth.requestDevice(options) &#x2F;&#x2F;Navigator对象，包含有关游览器的信息 .then(device &#x3D;&gt; &#123; console.log(&#39;&gt; Name: &#39; + device.name); console.log(&#39;&gt; Id: &#39; + device.id); console.log(&#39;&gt; Connected: &#39; + device.gatt.connected); selected_device &#x3D; device; console.log(selected_device); connect(); &#125;) .catch(error &#x3D;&gt;&#123; alert(&#39;ERROR:&#39; +error); console.log(&#39;ERROR:&#39; +error); &#125;); &#125; function connect() &#123; console.log(&quot;connecting&quot;); selected_device.gatt.connect() .then( function(server) &#x2F;&#x2F;表示连接成功 &#123; console.log(&quot;Connected to&quot; + server.device.id); console.log(&quot;Connected&#x3D;&quot; + server.connected); connected_server &#x3D; server; setConnectedStatus(true); &#125;, function(error) &#x2F;&#x2F;表示连接失败 &#123; console.log(&quot;ERROR:could not connct-&quot; + error); alert(&quot;ERROR:could not connct-&quot; + error); setConnectedStatus(false); &#125; ); &#125; function setConnectedStatus(status) &#123; connected&#x3D;status; document.getElementById(&#39;status_connected&#39;).innerHTML&#x3D;status; if(status&#x3D;&#x3D;true) &#123; document.getElementById(&#39;btn_scan&#39;).innerHTML&#x3D;&quot;Disconnect&quot;; &#125; else &#123; document.getElementById(&#39;btn_scan&#39;).innerHTML&#x3D;&quot;Discover Devices&quot;; &#125; &#125; &lt;&#x2F;script&gt; &lt;&#x2F;head&gt; &lt;body&gt; &lt;h2&gt; Status &lt;!-- 显示蓝牙状态--&gt; &lt;&#x2F;h2&gt; &lt;table border&#x3D;&quot;1&quot;&gt; &lt;tr&gt; &lt;td&gt; &lt;b&gt;Connected&lt;&#x2F;b&gt; &lt;&#x2F;td&gt; &lt;&#x2F;tr&gt; &lt;tr&gt; &lt;td id&#x3D;&quot;status_connected&quot;&gt;False&lt;&#x2F;td&gt; &lt;&#x2F;tr&gt; &lt;&#x2F;table&gt; &lt;h2&gt;Device Discovery &lt;&#x2F;h2&gt; &lt;!-- 扫描&#x2F;发现蓝牙设备 --&gt; &lt;button id&#x3D;&quot;btn_scan&quot; onclick&#x3D;&quot;discoverDevices()&quot;&gt; Start scan &lt;&#x2F;button&gt; &lt;&#x2F;body&gt;&lt;&#x2F;html&gt; 调用谷歌浏览器的内置蓝牙功能搜索周边设备找到自己的设备名，然后在网页的JS里面调用蓝牙的库函数搜索蓝牙设备，然后在蓝牙设备列表里面找到自己的设备，点击连接表格里面的连接状态就变成TRUE.","categories":[],"tags":[]},{"title":"矩阵控制灯","slug":"矩阵控制灯","date":"2020-09-19T07:11:44.000Z","updated":"2020-09-20T10:10:44.461Z","comments":true,"path":"2020/09/19/矩阵控制灯/","link":"","permalink":"https://lgx06.github.io/2020/09/19/%E7%9F%A9%E9%98%B5%E6%8E%A7%E5%88%B6%E7%81%AF/","excerpt":"","text":"本章任务 使用网页控制板子上的任意一盏灯 相关代码修改如下： 首先，要想控制板上任意一盏灯首先要添加25个按钮俩控制板子上的灯 COPY&lt;h3&gt;控制单个小灯亮暗&lt;&#x2F;h3&gt; &lt;button id&#x3D;&quot;led00&quot; onclick&#x3D;&quot;led00()&quot;&gt;第一行第一列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led01&quot; onclick&#x3D;&quot;led01()&quot;&gt;第一行第二列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led02&quot; onclick&#x3D;&quot;led02()&quot;&gt;第一行第三列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led03&quot; onclick&#x3D;&quot;led03()&quot;&gt;第一行第四列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led04&quot; onclick&#x3D;&quot;led04()&quot;&gt;第一行第五列&lt;&#x2F;button&gt; &lt;br&gt; &lt;button id&#x3D;&quot;led10&quot; onclick&#x3D;&quot;led10()&quot;&gt;第二行第一列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led11&quot; onclick&#x3D;&quot;led11()&quot;&gt;第二行第二列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led12&quot; onclick&#x3D;&quot;led12()&quot;&gt;第二行第三列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led13&quot; onclick&#x3D;&quot;led13()&quot;&gt;第二行第四列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led14&quot; onclick&#x3D;&quot;led14()&quot;&gt;第二行第五列&lt;&#x2F;button&gt; &lt;br&gt; &lt;button id&#x3D;&quot;led20&quot; onclick&#x3D;&quot;led20()&quot;&gt;第三行第一列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led21&quot; onclick&#x3D;&quot;led21()&quot;&gt;第三行第二列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led22&quot; onclick&#x3D;&quot;led22()&quot;&gt;第三行第三列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led23&quot; onclick&#x3D;&quot;led23()&quot;&gt;第三行第四列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led24&quot; onclick&#x3D;&quot;led24()&quot;&gt;第三行第五列&lt;&#x2F;button&gt; &lt;br&gt; &lt;button id&#x3D;&quot;led30&quot; onclick&#x3D;&quot;led30()&quot;&gt;第四行第一列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led31&quot; onclick&#x3D;&quot;led31()&quot;&gt;第四行第二列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led32&quot; onclick&#x3D;&quot;led32()&quot;&gt;第四行第三列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led33&quot; onclick&#x3D;&quot;led33()&quot;&gt;第四行第四列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led34&quot; onclick&#x3D;&quot;led34()&quot;&gt;第四行第五列&lt;&#x2F;button&gt; &lt;br&gt; &lt;button id&#x3D;&quot;led40&quot; onclick&#x3D;&quot;led40()&quot;&gt;第五行第一列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led41&quot; onclick&#x3D;&quot;led41()&quot;&gt;第五行第二列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led42&quot; onclick&#x3D;&quot;led42()&quot;&gt;第五行第三列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led43&quot; onclick&#x3D;&quot;led43()&quot;&gt;第五行第四列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led44&quot; onclick&#x3D;&quot;led44()&quot;&gt;第五行第五列&lt;&#x2F;button&gt; 每个按钮控制一个小灯 Javascript COPYfunction led00() &#x2F;&#x2F;第一行 &#123; if(c[0]&#x3D;&#x3D;0) &#123; led[0]&#x3D;led[0]|(1&lt;&lt;4); c[0]&#x3D;1; &#125; else&#123; led[0]&#x3D;led[0]&amp;(~(1&lt;&lt;4)); c[0]&#x3D;0; &#125; randLED(); &#125; function led01() &#123; if(c[1]&#x3D;&#x3D;0) &#123; led[0]&#x3D;led[0]|(1&lt;&lt;3); c[1]&#x3D;1; &#125; else&#123; led[0]&#x3D;led[0]&amp;(~(1&lt;&lt;3)); c[1]&#x3D;0; &#125; randLED(); &#125; function led02() &#123; if(c[2]&#x3D;&#x3D;0) &#123; led[0]&#x3D;led[0]|(1&lt;&lt;2); c[2]&#x3D;1; &#125; else&#123; led[0]&#x3D;led[0]&amp;(~(1&lt;&lt;2)); c[2]&#x3D;0; &#125; randLED(); &#125; function led03() &#123; if(c[3]&#x3D;&#x3D;0) &#123; led[0]&#x3D;led[0]|(1&lt;&lt;1); c[3]&#x3D;1; &#125; else&#123; led[0]&#x3D;led[0]&amp;(~(1&lt;&lt;1)); c[3]&#x3D;0; &#125; randLED(); &#125; function led04() &#123; if(c[4]&#x3D;&#x3D;0) &#123; led[0]&#x3D;led[0]|(1&lt;&lt;0); c[4]&#x3D;1; &#125; else&#123; led[0]&#x3D;led[0]&amp;(~(1&lt;&lt;0)); c[4]&#x3D;0; &#125; randLED(); &#125; function led10() &#x2F;&#x2F;第二行 &#123; if(c[5]&#x3D;&#x3D;0) &#123; led[1]&#x3D;led[1]|(1&lt;&lt;4); c[5]&#x3D;1; &#125; else&#123; led[1]&#x3D;led[1]&amp;(~(1&lt;&lt;4)); c[5]&#x3D;0; &#125; randLED(); &#125; function led11() &#123; if(c[6]&#x3D;&#x3D;0) &#123; led[1]&#x3D;led[1]|(1&lt;&lt;3); c[6]&#x3D;1; &#125; else&#123; led[1]&#x3D;led[1]&amp;(~(1&lt;&lt;3)); c[6]&#x3D;0; &#125; randLED(); &#125; function led12() &#123; if(c[7]&#x3D;&#x3D;0) &#123; led[1]&#x3D;led[1]|(1&lt;&lt;2); c[7]&#x3D;1; &#125; function led20() &#x2F;&#x2F;第三行 &#123; if(c[10]&#x3D;&#x3D;0) &#123; led[2]&#x3D;led[2]|(1&lt;&lt;4); c[10]&#x3D;1; &#125; else&#123; led[2]&#x3D;led[2]&amp;(~(1&lt;&lt;4)); c[10]&#x3D;0; &#125; randLED(); &#125; function led21() &#123; if(c[11]&#x3D;&#x3D;0) &#123; led[2]&#x3D;led[2]|(1&lt;&lt;3); c[11]&#x3D;1; &#125; else&#123; led[2]&#x3D;led[2]&amp;(~(1&lt;&lt;3)); c[11]&#x3D;0; &#125; randLED(); &#125; function led22() &#123; if(c[12]&#x3D;&#x3D;0) &#123; led[2]&#x3D;led[2]|(1&lt;&lt;2); c[12]&#x3D;1; &#125; else&#123; led[2]&#x3D;led[2]&amp;(~(1&lt;&lt;2)); c[12]&#x3D;0; &#125; randLED(); &#125; function led23() &#123; if(c[13]&#x3D;&#x3D;0) &#123; led[2]&#x3D;led[2]|(1&lt;&lt;1); c[13]&#x3D;1; &#125; else&#123; led[2]&#x3D;led[2]&amp;(~(1&lt;&lt;1)); c[13]&#x3D;0; &#125; randLED(); &#125; function led24() &#123; if(c[14]&#x3D;&#x3D;0) &#123; led[2]&#x3D;led[2]|(1&lt;&lt;0); c[14]&#x3D;1; &#125; else&#123; led[2]&#x3D;led[2]&amp;(~(1&lt;&lt;0)); c[14]&#x3D;0; &#125; randLED(); &#125; function led30() &#x2F;&#x2F;第四行 &#123; if(c[15]&#x3D;&#x3D;0) &#123; led[3]&#x3D;led[3]|(1&lt;&lt;4); c[15]&#x3D;1; &#125; else&#123; led[3]&#x3D;led[3]&amp;(~(1&lt;&lt;4)); c[15]&#x3D;0; &#125; randLED(); &#125; function led31() &#123; if(c[16]&#x3D;&#x3D;0) &#123; led[3]&#x3D;led[3]|(1&lt;&lt;3); c[16]&#x3D;1; &#125; else&#123; led[3]&#x3D;led[3]&amp;(~(1&lt;&lt;3)); c[16]&#x3D;0; &#125; randLED(); &#125; function led32() &#123; if(c[17]&#x3D;&#x3D;0) &#123; led[3]&#x3D;led[3]|(1&lt;&lt;2); c[17]&#x3D;1; &#125; else&#123; led[3]&#x3D;led[3]&amp;(~(1&lt;&lt;2)); c[17]&#x3D;0; &#125; randLED(); &#125; function led33() &#123; if(c[18]&#x3D;&#x3D;0) &#123; led[3]&#x3D;led[3]|(1&lt;&lt;1); c[18]&#x3D;1; &#125; else&#123; led[3]&#x3D;led[3]&amp;(~(1&lt;&lt;1)); c[18]&#x3D;0; &#125; randLED(); &#125; function led34() &#123; if(c[19]&#x3D;&#x3D;0) &#123; led[3]&#x3D;led[3]|(1&lt;&lt;0); c[19]&#x3D;1; &#125; else&#123; led[3]&#x3D;led[3]&amp;(~(1&lt;&lt;0)); c[19]&#x3D;0; &#125; randLED(); &#125; function led40() &#x2F;&#x2F;第五行 &#123; if(c[20]&#x3D;&#x3D;0) &#123; led[4]&#x3D;led[4]|(1&lt;&lt;4); c[20]&#x3D;1; &#125; else&#123; led[4]&#x3D;led[4]&amp;(~(1&lt;&lt;4)); c[20]&#x3D;0; &#125; randLED(); &#125; function led41() &#123; if(c[21]&#x3D;&#x3D;0) &#123; led[4]&#x3D;led[4]|(1&lt;&lt;3); c[21]&#x3D;1; &#125; else&#123; led[4]&#x3D;led[4]&amp;(~(1&lt;&lt;3)); c[21]&#x3D;0; &#125; randLED(); &#125; function led42() &#123; if(c[22]&#x3D;&#x3D;0) &#123; led[4]&#x3D;led[4]|(1&lt;&lt;2); c[22]&#x3D;1; &#125; else&#123; led[4]&#x3D;led[4]&amp;(~(1&lt;&lt;2)); c[22]&#x3D;0; &#125; randLED(); &#125; function led43() &#123; if(c[23]&#x3D;&#x3D;0) &#123; led[4]&#x3D;led[4]|(1&lt;&lt;1); c[23]&#x3D;1; &#125; else&#123; led[4]&#x3D;led[4]&amp;(~(1&lt;&lt;1)); c[23]&#x3D;0; &#125; randLED(); &#125; function led44() &#123; if(c[24]&#x3D;&#x3D;0) &#123; led[4]&#x3D;led[4]|(1&lt;&lt;0); c[24]&#x3D;1; &#125; else&#123; led[4]&#x3D;led[4]&amp;(~(1&lt;&lt;0)); c[24]&#x3D;0; &#125; randLED(); &#125; 相关现象","categories":[],"tags":[]},{"title":"LED","slug":"led","date":"2020-09-19T07:08:44.000Z","updated":"2020-09-20T10:10:44.821Z","comments":true,"path":"2020/09/19/led/","link":"","permalink":"https://lgx06.github.io/2020/09/19/led/","excerpt":"","text":"&lt;html&gt; &lt;head&gt; &lt;script&gt; var selected_device; &#x2F;&#x2F;选择设备 var connected_server; &#x2F;&#x2F;连接设备 var connected&#x3D;false;&#x2F;&#x2F;连接状态 var services_discovered&#x3D;false;&#x2F;&#x2F;发现设备状态 &#x2F;&#x2F; 添加服务和特性状态变量 var has_accelerometer_service &#x3D; false; &#x2F;&#x2F;加速度服务状态 var has_accelerometer_data &#x3D; false; &#x2F;&#x2F;加速度特性状态 var has_led_service &#x3D; false;&#x2F;&#x2F;led服务状态 var has_led_matrix_state &#x3D; false; &#x2F;&#x2F;led控制特性状态 var has_device_information_service &#x3D; false; &#x2F;&#x2F;设备信息服务状态 var has_model_name_string &#x3D; false; &#x2F;&#x2F;设备信息特性状态 var has_temperature_service &#x3D;false; &#x2F;&#x2F;温度服务状态 var has_tem_temperature &#x3D; false; &#x2F;&#x2F;温度特性状态 &#x2F;&#x2F; 服务 UUIDs ACCELEROMETER_SERVICE &#x3D; &#39;e95d0753-251d-470a-a062-fa1922dfa9a8&#39;; LED_SERVICE &#x3D; &#39;e95dd91d-251d-470a-a062-fa1922dfa9a8&#39;; DEVICE_INFORMATION_SERVICE &#x3D; &#39;0000180a-0000-1000-8000-00805f9b34fb&#39;; TEMPERATURE_SERVICE &#x3D; &#39;e95d6100-251d-470a-a062-fa1922dfa9a8&#39;; &#x2F;&#x2F; 特性 UUIDs ACCELEROMETER_DATA &#x3D; &#39;e95dca4b-251d-470a-a062-fa1922dfa9a8&#39;; LED_MATRIX_STATE &#x3D; &#39;e95d7b77-251d-470a-a062-fa1922dfa9a8&#39;; MODEL_NUMBER_STRING &#x3D; &#39;00002a24-0000-1000-8000-00805f9b34fb&#39;; TEM_TEMPERATURE &#x3D; &#39;e95d1b25-251d-470a-a062-fa1922dfa9a8&#39;; &#x2F;&#x2F; 添加特性变量 var led_matrix_state; var model_number_string; var accelerometer_data; var tem_temperature; &#x2F;&#x2F;添加服务，特性相关参数 var service_count; var services_discovered; var characteristics_discovered; var characteristic_count ; function discoverOrdisconnectDevices()&#x2F;&#x2F; 断开连接 &#123; console.log(&quot;discoverOrdisconnectDevices&quot;); if(!connected) discoverDevices(); else &#123; selected_device.gatt.disconnect(); &#125; &#125; function onDisconnected()&#x2F;&#x2F;连接 &#123; console.log(&quot;onDisconnected&quot;); resetUI(); &#125; &#x2F;&#x2F;function input.temperature(): number; function discoverDevices()&#x2F;&#x2F; 搜索设备函数 &#123; console.log(&quot;discoverDevices&quot;); var options &#x3D; &#123;acceptAllDevices:true, optionalServices: [DEVICE_INFORMATION_SERVICE, ACCELEROMETER_SERVICE, LED_SERVICE,TEMPERATURE_SERVICE] &#x2F;&#x2F;在第5节课上添加 &#125; &#x2F;&#x2F;发现所有周边蓝牙设备 navigator.bluetooth.requestDevice(options) .then(device &#x3D;&gt; &#123; console.log(&#39;&gt; Name:&#39; + device.name); console.log(&#39;&gt; Id:&#39; + device.id); console.log(&#39;&gt; Connected:&#39; + device.gatt.connected); selected_device &#x3D; device; console.log(selected_device); connect(); &#125;) .catch(error &#x3D;&gt; &#123; alert(&#39;ERROR&#39; +error); console.log(&#39;ERROR&#39; +error); &#125;); &#125; function connect() &#x2F;&#x2F;连接函数 &#123; console.log(&quot;connecting&quot;); selected_device.gatt.connect() .then( function (server) &#123; console.log(&quot;Connected to&quot; + server.device.id); console.log(&quot;Connected &quot; + server.connected); selected_device.addEventListener(&#39;gattserverdisconnected&#39;,onDisconnected); connected_server &#x3D;server; discoverSvcsAndChars(); &#x2F;&#x2F;在第5课基础上添加的函数 setConnectedStatus(true); &#125;, function (error) &#123; console.log(&quot;ERROR:could not connct-&quot; + error); alert(&quot;ERROR:could not connct-&quot; + error); setConnectedStatus(false); &#125; ); &#125; function setConnectedStatus(status)&#x2F;&#x2F;设置连接状态 &#123; connected&#x3D;status; document.getElementById(&#39;status_connected&#39;).innerHTML &#x3D; status; if(status&#x3D;&#x3D;true) &#123; document.getElementById(&#39;btn_scan&#39;).innerHTML &#x3D; &quot;Disconnect&quot;; &#125; else &#123; document.getElementById(&#39;btn_scan&#39;).innerHTML &#x3D; &quot;Discover Devices&quot;; &#125; &#125; function setDiscoveryStatus(status)&#x2F;&#x2F;设置发现状态 &#123; services_discovered&#x3D;status; document.getElementById(&#39;status_discovered&#39;).innerHTML&#x3D;status; &#125; function resetUI() &#x2F;&#x2F;重置页面 &#123; setConnectedStatus(false); &#125; function discoverSvcsAndChars() &#x2F;&#x2F;发现服务和特性 &#123; console.log(&quot;discoverSvcsAndChars server&#x3D;&quot; + connected_server); connected_server.getPrimaryServices() .then(services &#x3D;&gt; &#123; has_accelerometer_service &#x3D; false; has_led_service &#x3D; false; has_device_information_service &#x3D; false; has_temperature_service&#x3D; false; services_discovered &#x3D; 0; service_count &#x3D; services.length; console.log(&quot;Got &quot; + service_count + &quot; services&quot;); services.forEach(service &#x3D;&gt; &#123; if (service.uuid &#x3D;&#x3D; ACCELEROMETER_SERVICE) &#123; has_accelerometer_service &#x3D; true; &#125; if (service.uuid &#x3D;&#x3D; LED_SERVICE) &#123; has_led_service &#x3D; true; &#125; if (service.uuid &#x3D;&#x3D; DEVICE_INFORMATION_SERVICE) &#123; has_device_information_service &#x3D; true; &#125; if (service.uuid &#x3D;&#x3D; TEMPERATURE_SERVICE) &#x2F;&#x2F;温度 &#123; has_temperature_service &#x3D; true; &#125; console.log(&#39;Getting Characteristics for service &#39; + service.uuid); service.getCharacteristics() .then(characteristics &#x3D;&gt; &#123; console.log(&#39;&gt; Service: &#39; + service.uuid); services_discovered++; characteristics_discovered &#x3D; 0; characteristic_count &#x3D; characteristics.length; characteristics.forEach(characteristic &#x3D;&gt; &#123; characteristics_discovered++; console.log(&#39;&gt;&gt; Characteristic: &#39; + characteristic.uuid); if (characteristic.uuid &#x3D;&#x3D; ACCELEROMETER_DATA) &#123; accelerometer_data &#x3D; characteristic; has_accelerometer_data &#x3D; true; &#125; if (characteristic.uuid &#x3D;&#x3D; LED_MATRIX_STATE) &#123; led_matrix_state &#x3D; characteristic; has_led_matrix_state &#x3D; true; &#125; if (characteristic.uuid &#x3D;&#x3D; MODEL_NUMBER_STRING) &#123; model_number_string &#x3D; characteristic; has_model_name_string &#x3D; true; &#125; if(characteristic.uuid &#x3D;&#x3D; TEM_TEMPERATURE) &#x2F;&#x2F;温度 &#123; tem_temperature &#x3D; characteristic; has_tem_temperature &#x3D; true; &#125; if (services_discovered &#x3D;&#x3D; service_count &amp;&amp; characteristics_discovered &#x3D;&#x3D; characteristic_count) &#123; console.log(&quot;FINISHED DISCOVERY&quot;); setDiscoveryStatus(true); &#x2F;&#x2F;setDiscoveryStatus(true); &#125; &#125;); &#125;); &#125;); &#125;); &#125; var i&#x3D;0,j&#x3D;0; function randomLEDs(ct) &#x2F;&#x2F;控制led &#123; console.log(&quot;randomLEDs&quot;); &#x2F;&#x2F; state validation if (!connected) &#123; alert(&quot;Error: Discover and connect to a device before using this function&quot;); return; &#125; if (!services_discovered) &#123; alert(&quot;Error: Service discovery has not yet completed&quot;); return; &#125; if (!has_led_service) &#123; alert(&quot;Error: The connected device does not contain the LED service&quot;); return; &#125; if (!has_led_matrix_state) &#123; alert(&quot;Error: The connected device does not contain the LED matrix state characteristic&quot;); return; &#125; var led_array&#x3D;[]; if(ct&#x3D;&#x3D;0) &#123; led_array[0] &#x3D; 1&lt;&lt;i; led_array[1] &#x3D; 1&lt;&lt;i; led_array[2] &#x3D; 1&lt;&lt;i; led_array[3] &#x3D; 1&lt;&lt;i; led_array[4] &#x3D; 1&lt;&lt;i; i++; if(i&#x3D;&#x3D;5)i&#x3D;0; &#125; else if(ct&#x3D;&#x3D;1) &#123; led_array[0] &#x3D; 0; led_array[1] &#x3D; 0; led_array[2] &#x3D; 0; led_array[3] &#x3D; 0; led_array[4] &#x3D; 0; led_array[j] &#x3D; 31; j++; if(j&#x3D;&#x3D;5)j&#x3D;0; &#125; &#x2F;&#x2F; Math.random():0~1 Math.floor(x):返回小于等于x的最大整数 &#x2F;*led_array[0] &#x3D;10; led_array[1] &#x3D; 31; led_array[2] &#x3D; 31; led_array[3] &#x3D; 14; led_array[4] &#x3D; 4;*&#x2F; &#x2F;*led_array[0] &#x3D; 31; led_array[1] &#x3D; 17; led_array[2] &#x3D; 17; led_array[3] &#x3D; 17; led_array[4] &#x3D; 31; *&#x2F; var led_matrix_data &#x3D; new Uint8Array(led_array); led_matrix_state.writeValue(led_matrix_data.buffer) .then(_ &#x3D;&gt; &#123; console.log(&#39;LED matrix state changed&#39;); &#125;) .catch(error &#x3D;&gt; &#123; console.log(&#39;Error: &#39; + error); alert(&#39;Error: &#39; + error); return; &#125;); &#125; function readModelNumber() &#x2F;&#x2F; 蓝牙信息服务 &#123; console.log(&quot;readModelNumber&quot;); &#x2F;&#x2F; state validation if (!connected) &#123; alert(&quot;Error: Discover and connect to a device before using this function&quot;); return; &#125; if (!services_discovered) &#123; alert(&quot;Error: Service discovery has not yet completed&quot;); return; &#125; if (!has_device_information_service) &#123; alert(&quot;Error: The connected device does not contain the device information service&quot;); return; &#125; if (!has_model_name_string) &#123; alert(&quot;Error: The connected device does not contain the model name string characteristic&quot;); return; &#125; model_number_string.readValue() .then(value &#x3D;&gt; &#123; data &#x3D; new Uint8Array(value.buffer); model_number_string &#x3D; new TextDecoder(&quot;utf-8&quot;).decode(data); console.log(model_number_string); document.getElementById(&quot;model_number&quot;).innerHTML &#x3D; model_number_string; &#125;) .catch(error &#x3D;&gt; &#123; console.log(&#39;Error: &#39; + error); alert(&#39;Error: &#39; + error); return; &#125;); &#125; function accelerometer() &#x2F;&#x2F;加速度传感器 &#123; console.log(&quot;accelerometer&quot;); &#x2F;&#x2F; state validation if (!connected) &#123; alert(&quot;Error: Discover and connect to a device before using this function&quot;); return; &#125; if (!services_discovered) &#123; alert(&quot;Error: Service discovery has not yet completed&quot;); return; &#125; if (!has_accelerometer_service) &#123; alert(&quot;Error: The connected device does not contain the accelerometer service&quot;); return; &#125; if (!has_accelerometer_data) &#123; alert(&quot;Error: The connected device does not contain the accelerometer_data characteristic&quot;); return; &#125; accelerometer_data.readValue() .then(value &#x3D;&gt; &#123; buffer &#x3D; value.buffer; dataview &#x3D; new DataView(buffer); X &#x3D; dataview.getUint16(0, true); Y &#x3D; dataview.getUint16(2, true); Z &#x3D; dataview.getUint16(4, true); console.log(&quot;X&#x3D;&quot; + X + &quot;, Y&#x3D;&quot; + Y + &quot;, Z+&quot; + Z); document.getElementById(&quot;ac_data&quot;).innerHTML &#x3D; &quot;X&#x3D;&quot; + X + &quot;, Y&#x3D;&quot; + Y + &quot;,Z&#x3D;&quot; + Z; &#125;) .catch(error &#x3D;&gt; &#123; console.log(&#39;Error: &#39; + error); alert(&#39;Error: &#39; + error); return; &#125;); &#125; &lt;&#x2F;script&gt; &lt;&#x2F;head&gt; &lt;body&gt; &lt;h2&gt; Status &lt;&#x2F;h2&gt; &lt;table border&#x3D;&quot;1&quot;&gt; &lt;tr&gt; &lt;td&gt; &lt;b&gt;Connected&lt;&#x2F;b&gt; &lt;&#x2F;td&gt; &lt;td&gt; &lt;b&gt;Service Discovery Completed&lt;&#x2F;b&gt; &lt;&#x2F;td&gt; &lt;&#x2F;tr&gt; &lt;tr&gt; &lt;td id&#x3D;&quot;status_connected&quot;&gt; false &lt;&#x2F;td&gt; &lt;td id&#x3D;&quot;status_discovered&quot;&gt; false &lt;&#x2F;td&gt; &lt;&#x2F;tr&gt; &lt;&#x2F;table&gt; &lt;hr&gt; &lt;h2&gt; Device Discovery or Disconnect &lt;&#x2F;h2&gt; &lt;button id &#x3D; &quot;btn_scan&quot; onclick&#x3D;&quot;discoverOrdisconnectDevices()&quot;&gt;Start scan&lt;&#x2F;button&gt; &lt;hr&gt; &lt;h2&gt;Reading and Writing&lt;&#x2F;h2&gt; &lt;h3&gt;Write Characteristic - Randomise Lights&lt;&#x2F;h3&gt; &lt;button id&#x3D;&quot;btn_write&quot; onclick&#x3D;&quot;randomLEDs(0)&quot;&gt;控制led行&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;btu_write&quot; onclick&#x3D;&quot;randomLEDs(1)&quot;&gt;控制led列&lt;&#x2F;button&gt; &lt;h3&gt;Read Characteristic - Model number&lt;&#x2F;h3&gt; &lt;button id&#x3D;&quot;btn_read&quot; onclick&#x3D;&quot;readModelNumber()&quot;&gt;Read Model number&lt;&#x2F;button&gt; &lt;div id&#x3D;&quot;model_number&quot;&gt;&lt;&#x2F;div&gt; &lt;h3&gt;accelerometer_data&lt;&#x2F;h3&gt; &lt;button id&#x3D;&quot;btn_readAC&quot; onclick&#x3D;&quot;accelerometer()&quot;&gt;Read accelerometer_data&lt;&#x2F;button&gt; &lt;div id&#x3D;&quot;ac_data&quot;&gt;&lt;&#x2F;div&gt; &lt;hr&gt; &lt;&#x2F;body&gt;&lt;&#x2F;html&gt; 使用数组控制LED小灯","categories":[],"tags":[]},{"title":"LED小灯行列点亮","slug":"LED小灯行列点亮","date":"2020-09-15T10:29:18.000Z","updated":"2020-09-20T10:10:44.893Z","comments":true,"path":"2020/09/15/LED小灯行列点亮/","link":"","permalink":"https://lgx06.github.io/2020/09/15/LED%E5%B0%8F%E7%81%AF%E8%A1%8C%E5%88%97%E7%82%B9%E4%BA%AE/","excerpt":"","text":"先看一下代码： 这是行列点亮使用循环判断语句进行操作。最后利用谷歌浏览器测试。","categories":[],"tags":[]},{"title":"控制任意一盏灯","slug":"控制任意一盏灯","date":"2020-09-15T10:20:36.000Z","updated":"2020-09-20T10:10:44.213Z","comments":true,"path":"2020/09/15/控制任意一盏灯/","link":"","permalink":"https://lgx06.github.io/2020/09/15/%E6%8E%A7%E5%88%B6%E4%BB%BB%E6%84%8F%E4%B8%80%E7%9B%8F%E7%81%AF/","excerpt":"","text":"本章任务 使用网页控制板子上的任意一盏灯 相关代码修改如下： 首先，要想控制板上任意一盏灯首先要添加25个按钮俩控制板子上的灯 &lt;h3&gt;控制单个小灯亮暗&lt;/h3&gt; &lt;button id=&quot;led00&quot; onclick=&quot;led00()&quot;&gt;第一行第一列&lt;/button&gt; &lt;button id=&quot;led01&quot; onclick=&quot;led01()&quot;&gt;第一行第二列&lt;/button&gt; &lt;button id=&quot;led02&quot; onclick=&quot;led02()&quot;&gt;第一行第三列&lt;/button&gt; &lt;button id=&quot;led03&quot; onclick=&quot;led03()&quot;&gt;第一行第四列&lt;/button&gt; &lt;button id=&quot;led04&quot; onclick=&quot;led04()&quot;&gt;第一行第五列&lt;/button&gt; &lt;br&gt; &lt;button id=&quot;led10&quot; onclick=&quot;led10()&quot;&gt;第二行第一列&lt;/button&gt; &lt;button id=&quot;led11&quot; onclick=&quot;led11()&quot;&gt;第二行第二列&lt;/button&gt; &lt;button id=&quot;led12&quot; onclick=&quot;led12()&quot;&gt;第二行第三列&lt;/button&gt; &lt;button id=&quot;led13&quot; onclick=&quot;led13()&quot;&gt;第二行第四列&lt;/button&gt; &lt;button id=&quot;led14&quot; onclick=&quot;led14()&quot;&gt;第二行第五列&lt;/button&gt; &lt;br&gt; &lt;button id=&quot;led20&quot; onclick=&quot;led20()&quot;&gt;第三行第一列&lt;/button&gt; &lt;button id=&quot;led21&quot; onclick=&quot;led21()&quot;&gt;第三行第二列&lt;/button&gt; &lt;button id=&quot;led22&quot; onclick=&quot;led22()&quot;&gt;第三行第三列&lt;/button&gt; &lt;button id=&quot;led23&quot; onclick=&quot;led23()&quot;&gt;第三行第四列&lt;/button&gt; &lt;button id=&quot;led24&quot; onclick=&quot;led24()&quot;&gt;第三行第五列&lt;/button&gt; &lt;br&gt; &lt;button id=&quot;led30&quot; onclick=&quot;led30()&quot;&gt;第四行第一列&lt;/button&gt; &lt;button id=&quot;led31&quot; onclick=&quot;led31()&quot;&gt;第四行第二列&lt;/button&gt; &lt;button id=&quot;led32&quot; onclick=&quot;led32()&quot;&gt;第四行第三列&lt;/button&gt; &lt;button id=&quot;led33&quot; onclick=&quot;led33()&quot;&gt;第四行第四列&lt;/button&gt; &lt;button id=&quot;led34&quot; onclick=&quot;led34()&quot;&gt;第四行第五列&lt;/button&gt; &lt;br&gt; &lt;button id=&quot;led40&quot; onclick=&quot;led40()&quot;&gt;第五行第一列&lt;/button&gt; &lt;button id=&quot;led41&quot; onclick=&quot;led41()&quot;&gt;第五行第二列&lt;/button&gt; &lt;button id=&quot;led42&quot; onclick=&quot;led42()&quot;&gt;第五行第三列&lt;/button&gt; &lt;button id=&quot;led43&quot; onclick=&quot;led43()&quot;&gt;第五行第四列&lt;/button&gt; &lt;button id=&quot;led44&quot; onclick=&quot;led44()&quot;&gt;第五行第五列&lt;/button&gt; 每个按钮控制一个小灯 function led00() //第一行 &#123; if(c[0]==0) &#123; led[0]=led[0]|(1&lt;&lt;4); c[0]=1; &#125; else&#123; led[0]=led[0]&amp;(~(1&lt;&lt;4)); c[0]=0; &#125; randLED(); &#125; function led01() &#123; if(c[1]==0) &#123; led[0]=led[0]|(1&lt;&lt;3); c[1]=1; &#125; else&#123; led[0]=led[0]&amp;(~(1&lt;&lt;3)); c[1]=0; &#125; randLED(); &#125; function led02() &#123; if(c[2]==0) &#123; led[0]=led[0]|(1&lt;&lt;2); c[2]=1; &#125; else&#123; led[0]=led[0]&amp;(~(1&lt;&lt;2)); c[2]=0; &#125; randLED(); &#125; function led03() &#123; if(c[3]==0) &#123; led[0]=led[0]|(1&lt;&lt;1); c[3]=1; &#125; else&#123; led[0]=led[0]&amp;(~(1&lt;&lt;1)); c[3]=0; &#125; randLED(); &#125; function led04() &#123; if(c[4]==0) &#123; led[0]=led[0]|(1&lt;&lt;0); c[4]=1; &#125; else&#123; led[0]=led[0]&amp;(~(1&lt;&lt;0)); c[4]=0; &#125; randLED(); &#125; function led10() //第二行 &#123; if(c[5]==0) &#123; led[1]=led[1]|(1&lt;&lt;4); c[5]=1; &#125; else&#123; led[1]=led[1]&amp;(~(1&lt;&lt;4)); c[5]=0; &#125; randLED(); &#125; function led11() &#123; if(c[6]==0) &#123; led[1]=led[1]|(1&lt;&lt;3); c[6]=1; &#125; else&#123; led[1]=led[1]&amp;(~(1&lt;&lt;3)); c[6]=0; &#125; randLED(); &#125; function led12() &#123; if(c[7]==0) &#123; led[1]=led[1]|(1&lt;&lt;2); c[7]=1; &#125; else&#123; led[1]=led[1]&amp;(~(1&lt;&lt;2)); c[7]=0; &#125; randLED(); &#125; function led13() &#123; if(c[8]==0) &#123; led[1]=led[1]|(1&lt;&lt;1); c[8]=1; &#125; else&#123; led[1]=led[1]&amp;(~(1&lt;&lt;1)); c[8]=0; &#125; randLED(); &#125; function led14() &#123; if(c[9]==0) &#123; led[1]=led[1]|(1&lt;&lt;0); c[9]=1; &#125; else&#123; led[1]=led[1]&amp;(~(1&lt;&lt;0)); c[9]=0; &#125; randLED(); &#125; function led20() //第三行 &#123; if(c[10]==0) &#123; led[2]=led[2]|(1&lt;&lt;4); c[10]=1; &#125; else&#123; led[2]=led[2]&amp;(~(1&lt;&lt;4)); c[10]=0; &#125; randLED(); &#125; function led21() &#123; if(c[11]==0) &#123; led[2]=led[2]|(1&lt;&lt;3); c[11]=1; &#125; else&#123; led[2]=led[2]&amp;(~(1&lt;&lt;3)); c[11]=0; &#125; randLED(); &#125; function led22() &#123; if(c[12]==0) &#123; led[2]=led[2]|(1&lt;&lt;2); c[12]=1; &#125; else&#123; led[2]=led[2]&amp;(~(1&lt;&lt;2)); c[12]=0; &#125; randLED(); &#125; function led23() &#123; if(c[13]==0) &#123; led[2]=led[2]|(1&lt;&lt;1); c[13]=1; &#125; else&#123; led[2]=led[2]&amp;(~(1&lt;&lt;1)); c[13]=0; &#125; randLED(); &#125; function led24() &#123; if(c[14]==0) &#123; led[2]=led[2]|(1&lt;&lt;0); c[14]=1; &#125; else&#123; led[2]=led[2]&amp;(~(1&lt;&lt;0)); c[14]=0; &#125; randLED(); &#125; function led30() //第四行 &#123; if(c[15]==0) &#123; led[3]=led[3]|(1&lt;&lt;4); c[15]=1; &#125; else&#123; led[3]=led[3]&amp;(~(1&lt;&lt;4)); c[15]=0; &#125; randLED(); &#125; function led31() &#123; if(c[16]==0) &#123; led[3]=led[3]|(1&lt;&lt;3); c[16]=1; &#125; else&#123; led[3]=led[3]&amp;(~(1&lt;&lt;3)); c[16]=0; &#125; randLED(); &#125; function led32() &#123; if(c[17]==0) &#123; led[3]=led[3]|(1&lt;&lt;2); c[17]=1; &#125; else&#123; led[3]=led[3]&amp;(~(1&lt;&lt;2)); c[17]=0; &#125; randLED(); &#125; function led33() &#123; if(c[18]==0) &#123; led[3]=led[3]|(1&lt;&lt;1); c[18]=1; &#125; else&#123; led[3]=led[3]&amp;(~(1&lt;&lt;1)); c[18]=0; &#125; randLED(); &#125; function led34() &#123; if(c[19]==0) &#123; led[3]=led[3]|(1&lt;&lt;0); c[19]=1; &#125; else&#123; led[3]=led[3]&amp;(~(1&lt;&lt;0)); c[19]=0; &#125; randLED(); &#125; function led40() //第五行 &#123; if(c[20]==0) &#123; led[4]=led[4]|(1&lt;&lt;4); c[20]=1; &#125; else&#123; led[4]=led[4]&amp;(~(1&lt;&lt;4)); c[20]=0; &#125; randLED(); &#125; function led41() &#123; if(c[21]==0) &#123; led[4]=led[4]|(1&lt;&lt;3); c[21]=1; &#125; else&#123; led[4]=led[4]&amp;(~(1&lt;&lt;3)); c[21]=0; &#125; randLED(); &#125; function led42() &#123; if(c[22]==0) &#123; led[4]=led[4]|(1&lt;&lt;2); c[22]=1; &#125; else&#123; led[4]=led[4]&amp;(~(1&lt;&lt;2)); c[22]=0; &#125; randLED(); &#125; function led43() &#123; if(c[23]==0) &#123; led[4]=led[4]|(1&lt;&lt;1); c[23]=1; &#125; else&#123; led[4]=led[4]&amp;(~(1&lt;&lt;1)); c[23]=0; &#125; randLED(); &#125; function led44() &#123; if(c[24]==0) &#123; led[4]=led[4]|(1&lt;&lt;0); c[24]=1; &#125; else&#123; led[4]=led[4]&amp;(~(1&lt;&lt;0)); c[24]=0; &#125; randLED(); &#125; 相关现象","categories":[],"tags":[]},{"title":"启用通知","slug":"启用通知","date":"2020-09-15T10:20:30.000Z","updated":"2020-09-20T10:10:44.069Z","comments":true,"path":"2020/09/15/启用通知/","link":"","permalink":"https://lgx06.github.io/2020/09/15/%E5%90%AF%E7%94%A8%E9%80%9A%E7%9F%A5/","excerpt":"","text":"本章任务 在网页上显示加速度计得三轴值 了解 Micro:bit采用的是Freescale MMA8653FC 三轴加速度传感器，I2C接口与外部通信，10位ADC精度，可设置量程为±2g，±4g，±8g，数据最大更新速率为800Hz。 当Micro:bit处于静止或匀速运动状态时，加速计仅检测到重力加速度；将Micro:bit轻微甩动，加速计检测到甩动的加速度远小于重力加速度，可忽略不计，因此，在使用Micro:bit过程中，主要是检测当姿态变化时，重力加速度在x,y,z轴上的变化，并在此基础上应用。 相关代码 &lt;html&gt; &lt;head&gt; &lt;script&gt; var selected_device; var connected_server; var connected = false; var services_discovered = false; //在第5课上添加 var notifications_enabled = false; //在第5课上添加以下内容 var has_accelerometer_service = false; var has_accelerometer_data = false; var has_led_service = false; var has_led_matrix_state = false; var has_device_information_service = false; var has_model_name_string = false; // service UUIDs ACCELEROMETER_SERVICE = &#x27;e95d0753-251d-470a-a062-fa1922dfa9a8&#x27;; LED_SERVICE = &#x27;e95dd91d-251d-470a-a062-fa1922dfa9a8&#x27;; DEVICE_INFORMATION_SERVICE = &#x27;0000180a-0000-1000-8000-00805f9b34fb&#x27;; // characteristic UUIDs ACCELEROMETER_DATA = &#x27;e95dca4b-251d-470a-a062-fa1922dfa9a8&#x27;; LED_MATRIX_STATE = &#x27;e95d7b77-251d-470a-a062-fa1922dfa9a8&#x27;; MODEL_NUMBER_STRING = &#x27;00002a24-0000-1000-8000-00805f9b34fb&#x27;; // cached characteristics var led_matrix_state; var model_number_string; var accelerometer_data; // var service_count; var services_discovered; var characteristics_discovered; var characteristic_count ; function discoverOrdisconnectDevices() &#123; console.log(&quot;discoverDevicesOrDisconnect&quot;); if (!connected) discoverDevices(); else &#123; selected_device.gatt.disconnect(); &#125; &#125; function setNotificationsStatus(status) &#123; notifications_enabled = status; document.getElementById(&#x27;status_notifications&#x27;).innerHTML = status; &#125; function onDisconnected() &#123; console.log(&quot;onDisconnected&quot;); resetUI(); &#125; function onAccelerometerData(event) &#123; console.log(&quot;onAccelerometerData&quot;); buffer = event.target.value.buffer; dataview = new DataView(buffer); X = dataview.getUint16(0, true); Y = dataview.getUint16(2, true); Z = dataview.getUint16(4, true); console.log(&quot;X=&quot; + X + &quot;, Y=&quot; + Y + &quot;, Z+&quot; + Z); document.getElementById(&quot;accelerometer_data&quot;).innerHTML = &quot;X=&quot; + X + &quot;, Y=&quot; + Y + &quot;, Z=&quot; + Z; &#125; function discoverDevices() &#123; console.log(&quot;discoverDevices&quot;); var options = &#123;acceptAllDevices:true, optionalServices: [DEVICE_INFORMATION_SERVICE, ACCELEROMETER_SERVICE, LED_SERVICE] //在第5节课上添加 &#125; navigator.bluetooth.requestDevice(options) .then(device =&gt; &#123; console.log(&#x27;&gt; Name:&#x27; + device.name); console.log(&#x27;&gt; Id:&#x27; + device.id); console.log(&#x27;&gt; Connected:&#x27; + device.gatt.connected); selected_device = device; console.log(selected_device); connect(); &#125;) .catch(error =&gt; &#123; alert(&#x27;ERROR:&#x27; +error); console.log(&#x27;ERROR:&#x27; + error); &#125;); &#125; function connect() &#123; console.log(&quot;connecting&quot;); selected_device.gatt.connect() .then( function (server) //表示连接成功 &#123; console.log(&quot;Connected to&quot; + server.device.id); console.log(&quot;Connected=&quot; + server.connected); selected_device.addEventListener( &#x27;gattserverdisconnected&#x27;,onDisconnected); // 在第4课基础上添加的函数 connected_server = server; discoverSvcsAndChars(); ////在第5课基础上添加的函数 setConnectedStatus(true); // 在第3课基础上添加的函数,设置电脑蓝牙的当前连接状态 &#125;, function (error) //表示连接失败 &#123; console.log(&quot;ERROR:could not connct-&quot; + error); alert(&quot;ERROR:could not connct-&quot; + error); setConnectedStatus(false); // 在第3课基础上添加的函数,设置电脑蓝牙的当前连接状态 &#125; ); &#125; function setConnectedStatus(status) // 在第3课基础上添加的函数,设置电脑蓝牙的当前连接状态 &#123; connected = status; document.getElementById(&#x27;status_connected&#x27;).innerHTML = status; if (status == true) &#123; document.getElementById(&#x27;btn_scan&#x27;).innerHTML = &quot;Disconnect&quot;; &#125; else &#123; document.getElementById(&#x27;btn_scan&#x27;).innerHTML = &quot;Discover Devices&quot;; &#125; &#125; function setDiscoveryStatus(status) &#123; services_discovered = status; document.getElementById(&#x27;status_discovered&#x27;).innerHTML = status; &#125; function resetUI() // 在第4课基础上添加的函数 &#123; setConnectedStatus(false); setDiscoveryStatus(false); // 在第5课基础上添加的函数 setNotificationsStatus(false); &#125; function discoverSvcsAndChars() //在第5课基础上添加的函数 &#123; console.log(&quot;discoverSvcsAndChars server=&quot; + connected_server); connected_server.getPrimaryServices()//调用函数去获取BBC上的相应的服务 .then(services =&gt; //对服务进行判断 &#123; has_accelerometer_service = false; has_led_service = false; has_device_information_service = false; services_discovered = 0; service_count = services.length; //发现BBC板服务的个数 console.log(&quot;Got &quot; + service_count + &quot; services&quot;); services.forEach(service =&gt; //对已发现的所有服务进行判断 &#123; if (service.uuid == ACCELEROMETER_SERVICE) &#123; has_accelerometer_service = true; &#125; if (service.uuid == LED_SERVICE) &#123; has_led_service = true; &#125; if (service.uuid == DEVICE_INFORMATION_SERVICE) &#123; has_device_information_service = true; &#125; console.log(&#x27;Getting Characteristics for service &#x27; + service.uuid); service.getCharacteristics() //获取相应服务的所有特性 .then(characteristics =&gt; &#123; console.log(&#x27;&gt; Service: &#x27; + service.uuid); services_discovered++; //发现一个就加一 characteristics_discovered = 0; characteristic_count = characteristics.length; //特性的个数 characteristics.forEach(characteristic =&gt; //对已发现的特性进行判断 &#123; characteristics_discovered++; console.log(&#x27;&gt;&gt; Characteristic: &#x27; + characteristic.uuid); if (characteristic.uuid == ACCELEROMETER_DATA) &#123; accelerometer_data = characteristic; //把发现的相应特性保存到相应变量中 has_accelerometer_data = true; &#125; if (characteristic.uuid == LED_MATRIX_STATE) &#123; led_matrix_state = characteristic; has_led_matrix_state = true; &#125; if (characteristic.uuid == MODEL_NUMBER_STRING) &#123; model_number_string = characteristic; has_model_name_string = true; &#125; if (services_discovered == service_count &amp;&amp; characteristics_discovered == characteristic_count) &#123; console.log(&quot;FINISHED DISCOVERY&quot;); setDiscoveryStatus(true); //setDiscoveryStatus(true); &#125; &#125;); &#125;); &#125;); &#125;); &#125; function randomLEDs()//第六节课添加 &#123; console.log(&quot;randomLEDs&quot;); //state validation if (!connected) &#123; alert(&quot;Error: Discover and connect to a device before using this function&quot;); return &#125; if (!services_discovered)//有没有发现所有服务 &#123; alert(&quot;Error: Service discovery has not yet completed&quot;); return &#125; if (!has_led_service) &#123; alert(&quot;Error: The connected device does not contain the LED service&quot;); return &#125; if (!has_led_matrix_state)//led灯的特性有没有被发现的一个标记变量 &#123; alert(&quot;Error: The connected device does not contain the LED matrix state characteristic&quot;); return; &#125; var led_array = [0, 0, 0, 0, 0]; //math.random():0~1 math.floor(x):返回小于等于x的最大整数 led_array[0] = Math.floor(Math.random() * 32); led_array[1] = 1; led_array[2] = 2; led_array[3] = 3; led_array[4] = 4; var led_matrix_data = new Uint8Array(led_array); led_matrix_state.writeValue(led_matrix_data.buffer)//控制板子上灯亮灭 .then(_ =&gt; &#123; console.log(&#x27;LED matrix state changed&#x27;); &#125;) .catch(error =&gt; &#123; console.log(&#x27;Error: &#x27; + error); alert(&#x27;Error: &#x27; +error); return; &#125;); &#125;function readModelNumber() &#123; console.log(&quot;readModelNumber&quot;); // state validation if (!connected) &#123; alert(&quot;Error: Discover and connect to a device before using this function&quot;); return; &#125; if (!services_discovered) &#123; alert(&quot;Error: Service discovery has not yet completed&quot;); return; &#125; if (!has_device_information_service) &#123; alert(&quot;Error: The connected device does not contain the device information service&quot;); return; &#125; if (!has_model_name_string) &#123; alert(&quot;Error: The connected device does not contain the model name string characteristic&quot;); return; &#125; model_number_string.readValue() .then(value =&gt; &#123; data = new Uint8Array(value.buffer); model_number_string = new TextDecoder(&quot;utf8&quot;).decode(data); console.log(model_number_string); document.getElementById(&quot;model_number&quot;).innerHTML = model_number_string; &#125;) .catch(error =&gt; &#123; console.log(&#x27;Error: &#x27; + error); alert(&#x27;Error: &#x27; + error); return; &#125;); &#125;function toggleAccelerometerNotifications() &#123; console.log(&quot;toggleAccelerometerNotifications&quot;); if (!connected) &#123; alert(&quot;Error: Discover and connect to a device before using this function&quot;); return; &#125; if (!services_discovered) &#123; alert(&quot;Error: Service discovery has not yet completed&quot;); return; &#125; if (!has_accelerometer_service) &#123; alert(&quot;Error: The connected device does not contain the accelerometer service&quot;); return; &#125; if (!has_accelerometer_data) &#123; alert(&quot;Error: The connected device does not contain the accelerometer data characteristic&quot;); return; &#125; if (!notifications_enabled) &#123; accelerometer_data.startNotifications() .then(_ =&gt; &#123; console.log(&#x27;accelerometer notifications started&#x27;); setNotificationsStatus(true); accelerometer_data.addEventListener(&#x27;characteristicvaluechanged&#x27;, onAccelerometerData); &#125;) .catch(error =&gt; &#123; console.log(&#x27;Error: &#x27; + error); alert(&#x27;Error: &#x27; + error); return; &#125;); &#125; else &#123; accelerometer_data.stopNotifications() .then(_ =&gt; &#123; console.log(&#x27;accelerometer notificaions stopped&#x27;); setNotificationsStatus(false); accelerometer_data.removeEventListener(&#x27;characteristicvaluechanged&#x27;, onAccelerometerData); &#125;) .catch(error =&gt; &#123; console.log(&#x27;Could not stop accelerometer_data notifications: &#x27; + error); &#125;); &#125;&#125;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;h2&gt; Status&lt;/h2&gt;&lt;table border=&quot;1&quot;&gt; &lt;tr&gt; &lt;!--表格的第一行 --&gt; &lt;td&gt;&lt;b&gt;Connected&lt;/b&gt;&lt;/td&gt; &lt;td&gt;&lt;b&gt;Service Discovery Completed&lt;/b&gt;&lt;/td&gt; &lt;td&gt; &lt;b&gt;Notifications&lt;/b&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;!--表格的第二行 --&gt; &lt;td id=&quot;status_connected&quot;&gt; false &lt;/td&gt; &lt;td id=&quot;status_discovered&quot;&gt; false &lt;/td&gt; &lt;td id=&quot;status_notifications&quot;&gt;false&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;h2&gt; Device Discovery Or Disconnect &lt;!-- 扫描/发现蓝牙设备 --&gt; &lt;/h2 &gt;&lt;button id=&quot;btn_scan&quot; onclick=&quot;discoverOrdisconnectDevices()&quot;&gt;Start scan&lt;/button&gt;&lt;hr&gt;&lt;h2&gt;Reading and Writing&lt;/h2&gt;&lt;h3&gt;Write Characteristic - Randomise Lights&lt;/h3&gt;&lt;button id=&quot;btn_write&quot; onclick=&quot;randomLEDs()&quot;&gt;Randomise LEDs&lt;/button&gt;&lt;h3&gt;Read Characteristic - Model Number&lt;/h3&gt; &lt;button id=&quot;btn_read&quot; onclick=&quot;readModelNumber()&quot;&gt;Read Model Number&lt;/button&gt; &lt;div id=&quot;model_number&quot;&gt;&lt;/div&gt; &lt;hr&gt; &lt;h2&gt;Notifications - Accelerometer X, Y, Z&lt;/h2&gt; &lt;button id=&quot;btn_notify&quot; onclick=&quot;toggleAccelerometerNotifications()&quot;&gt;Toggle Notifications&lt;/button&gt; &lt;div id=&quot;accelerometer_data&quot;&gt;&lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 观察现象 图上的状态差不多是板子在水平状态下的值。","categories":[],"tags":[]},{"title":"添加服务特性","slug":"如何添加服务特性","date":"2020-09-15T10:20:23.000Z","updated":"2020-09-20T10:10:44.174Z","comments":true,"path":"2020/09/15/如何添加服务特性/","link":"","permalink":"https://lgx06.github.io/2020/09/15/%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E6%9C%8D%E5%8A%A1%E7%89%B9%E6%80%A7/","excerpt":"","text":"相关代码&lt;html&gt; &lt;head&gt; &lt;script&gt; var selected_device; // 保存用户选择的蓝牙设备 var connected_server; //在第二课基础上添加的变量，保存用户连接的蓝牙设备 var connected=false; //在第三课基础上添加的变量，保存电脑蓝牙的当前连接设备 var services_discovered =false; //在第五节课上添加 //在第5课上添加以下内容 // presence of services and characteristics var has_accelerometer_service = false; var has_accelerometer_data = false; var has_led_service = false; var has_led_matrix_state = false; var has_device_information_service = false; var has_model_number_string = false; var has_temperature_service = false; var has_temperature = false; // service UUIDs ACCELEROMETER_SERVICE = &#x27;e95d0753-251d-470a-a062-fa1922dfa9a8&#x27;; LED_SERVICE = &#x27;e95dd91d-251d-470a-a062-fa1922dfa9a8&#x27;; DEVICE_INFORMATION_SERVICE = &#x27;0000180a-0000-1000-8000-00805f9b34fb&#x27;; TEMPERATURE_SERVICE = &#x27;e95d6100-251d-470a-a062-fa1922dfa9a8&#x27;; // characteristic UUIDs ACCELEROMETER_DATA = &#x27;e95dca4b-251d-470a-a062-fa1922dfa9a8&#x27;; LED_MATRIX_STATE = &#x27;e95d7b77-251d-470a-a062-fa1922dfa9a8&#x27;; MODEL_NUMBER_STRING = &#x27;00002a24-0000-1000-8000-00805f9b34fb&#x27;; TEMPERATURE=&#x27;e95d9250-251d-470a-a062-fa1922dfa9a8&#x27;; // cached characteristics var accelerometer_data; var accelerometer_data; var led_matrix_state; var model_number_string; var temperature; // var service_count; var services_discovered; var characteristics_discovered; var characteristic_count ; function discoverDevicesOrDisconnect() //在第四课基础上添加的函数 &#123; console.log(&quot;discoverDevicesOrDisconnect&quot;); console.log(&quot;。。。&quot;) if(!connected) discoverDevices(); else &#123; selected_device.gatt.disconnect(); &#125; &#125; function onDisconnected() //在第四课基础上添加的函数 &#123; console.log(&quot;onDisconnected&quot;) resetUI(); &#125; function discoverDevices() &#123; console.log(&quot;discoverDevices&quot;); //consol.log 控制台打印输出 var options = &#123;acceptAllDevices:true, optionalServices: [DEVICE_INFORMATION_SERVICE, ACCELEROMETER_SERVICE, LED_SERVICE,TEMPERATURE_SERVICE] //在第5节课上添加 &#125; //发现所有周边蓝牙设备 navigator.bluetooth.requestDevice(options) //Navigator对象，包含有关游览器的信息 .then(device =&gt; &#123; console.log(&#x27;&gt; Name: &#x27; + device.name); console.log(&#x27;&gt; Id: &#x27; + device.id); console.log(&#x27;&gt; Connected: &#x27; + device.gatt.connected); selected_device = device; console.log(selected_device); connect(); //在第二课基础上添加的函数 &#125;) .catch(error =&gt;&#123; alert(&#x27;ERROR:&#x27; +error); console.log(&#x27;ERROR:&#x27; +error); &#125;); &#125; function connect() &#123; console.log(&quot;connecting&quot;); selected_device.gatt.connect() .then( function(server) //表示连接成功 &#123; console.log(&quot;Connected to&quot; + server.device.id); console.log(&quot;Connected=&quot; + server.connected); selected_device.addEventListener(&#x27;gattserverdisconnected&#x27;,onDisconnected); connected_server = server; discoverSvcsAndChars(); setConnectedStatus(true); &#125;, function(error) //表示连接失败 &#123; console.log(&quot;ERROR:could not connct-&quot; + error); alert(&quot;ERROR:could not connct-&quot; + error); setConnectedStatus(false); &#125; ); &#125; function setConnectedStatus(status) &#123; connected=status; document.getElementById(&#x27;status_connected&#x27;).innerHTML=status; if(status==true) &#123; document.getElementById(&#x27;btn_scan&#x27;).innerHTML=&quot;Disconnect&quot;; &#125; else &#123; document.getElementById(&#x27;btn_scan&#x27;).innerHTML=&quot;Discover Devices&quot;; &#125; &#125; function setDiscoveryStatus(status) &#123; services_discovered = status; document.getElementById(&#x27;status_discovered&#x27;).innerHTML = status; &#125; function resetUI() &#123; setConnectedStatus(false); setDiscoveryStatus(false); &#125; function discoverSvcsAndChars() //在第5课基础上添加的函数 &#123; console.log(&quot;discoverSvcsAndChars server=&quot; + connected_server); connected_server.getPrimaryServices() .then(services =&gt; &#123; has_accelerometer_service = false; has_led_service = false; has_device_information_service = false; has_temperature_service = false; services_discovered = 0; service_count = services.length; console.log(&quot;Got &quot; + service_count + &quot; services&quot;); services.forEach(service =&gt; &#123; if (service.uuid == ACCELEROMETER_SERVICE) &#123; has_accelerometer_service = true; &#125; if (service.uuid == LED_SERVICE) &#123; has_led_service = true; &#125; if (service.uuid == DEVICE_INFORMATION_SERVICE) &#123; has_device_information_service = true; &#125; if (service.uuid == TEMPERATURE_SERVICE) &#123; has_temperature_service = true; &#125; console.log(&#x27;Getting Characteristics for service &#x27; + service.uuid); service.getCharacteristics() .then(characteristics =&gt; &#123; console.log(&#x27;&gt; Service: &#x27; + service.uuid); services_discovered++; characteristics_discovered = 0; characteristic_count = characteristics.length; characteristics.forEach(characteristic =&gt; &#123; characteristics_discovered++; console.log(&#x27;&gt;&gt; Characteristic: &#x27; + characteristic.uuid); if (characteristic.uuid == ACCELEROMETER_DATA) &#123; accelerometer_data = characteristic; has_accelerometer_data = true; &#125; if (characteristic.uuid == LED_MATRIX_STATE) &#123; led_matrix_state = characteristic; has_led_matrix_state = true; &#125; if (characteristic.uuid == MODEL_NUMBER_STRING) &#123; model_number_string = characteristic; has_model_number_string = true; &#125; if (characteristic.uuid == TEMPERATURE) &#123; temperature = characteristic; has_temperature = true; &#125; if (services_discovered == service_count &amp;&amp; characteristics_discovered == characteristic_count) &#123; console.log(&quot;FINISHED DISCOVERY&quot;); setDiscoveryStatus(true); // setDiscoveryStatus(true); &#125; &#125;); &#125;); &#125;); &#125;); &#125; var i=0; function randomLEDs() //第6课上添加 &#123; console.log(&quot;randomLEDs&quot;); // state validation if (!connected) &#123; alert(&quot;Error: Discover and connect to a device before using this function&quot;); return; &#125; if (!services_discovered) &#123; alert(&quot;Error: Service discovery has not yet completed&quot;); return; &#125; if (!has_led_service) &#123; alert(&quot;Error: The connected device does not contain the LED service&quot;); return; &#125; if (!has_led_matrix_state) &#123; alert(&quot;Error: The connected device does not contain the LED matrix state characteristic&quot;); return; &#125; var led_array = [0, 0, 0, 0, 0]; var led_array2 =[[12,2,12,2,12],[4,10,2,4,14],[4,12,4,4,14],[0,10,21,10,4],[10,21,17,10,4]]; // Math.random():0~1 Math.floor(x):返回小于等于x的最大整数 led_array=led_array2[i%5]; i++; /*led_array[0] = led_array2[i][1]; led_array[1] = led_array2[i][1]; led_array[2] = led_array2[i][2]; led_array[3] = led_array2[i][3]; led_array[4] = led_array2[i][4];*/ /* led_array[0] = 10;//Math.floor(Math.random() * 32); led_array[1] = 21; led_array[2] = 17; led_array[3] = 10; led_array[4] = 4; */ var led_matrix_data = new Uint8Array(led_array); led_matrix_state.writeValue(led_matrix_data.buffer) .then(_ =&gt; &#123; console.log(&#x27;LED matrix state changed&#x27;); &#125;) .catch(error =&gt; &#123; console.log(&#x27;Error: &#x27; + error); alert(&#x27;Error: &#x27; + error); return; &#125;); &#125; &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Web Bluetooth&lt;/h1&gt; &lt;h2&gt; Status &lt;!-- 显示蓝牙状态--&gt; &lt;/h2&gt; &lt;table border=&quot;1&quot;&gt; &lt;tr&gt; &lt;td&gt; &lt;b&gt;Connected&lt;/b&gt; &lt;/td&gt; &lt;td&gt; &lt;b&gt;Service Discovery Completed&lt;/b&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td id=&quot;status_connected&quot;&gt;False&lt;/td&gt; &lt;td id=&quot;status_discovered&quot;&gt;False&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;hr&gt; &lt;h2&gt;Device Discovery Or Disconnect&lt;/h2&gt; &lt;!-- 扫描/发现蓝牙设备 --&gt; &lt;button id=&quot;btn_scan&quot; onclick=&quot;discoverDevicesOrDisconnect()&quot;&gt; Discover Devices &lt;/button&gt; &lt;hr&gt; &lt;h2&gt;Reading and Writing&lt;/h2&gt; &lt;h3&gt;Write Characteristic - Randomise Lights&lt;/h3&gt; &lt;button id=&quot;btn_write&quot; onclick=&quot;randomLEDs()&quot;&gt;Randomise LEDs&lt;/button&gt; &lt;hr&gt; &lt;/body&gt;&lt;/html&gt; 这时打开网页蓝牙应显示以下效果 右边可以看到相关服务及特性。 温度服务由于BBC板里没有温度服务，需要我们去官网下载。 添加相关程序 &lt;html&gt; &lt;head&gt; &lt;script&gt; var selected_device; var connected_server; var connected=false; var services_discovered=false; //在第5课上添加以下内容 // presence of services and characteristics var has_accelerometer_service = false; var has_accelerometer_data = false; var has_led_service = false; var has_led_matrix_state = false; var has_device_information_service = false; var has_model_name_string = false; var has_temperature_service =false; //温度 var has_tem_temperature = false; // service UUIDs ACCELEROMETER_SERVICE = &#x27;e95d0753-251d-470a-a062-fa1922dfa9a8&#x27;; LED_SERVICE = &#x27;e95dd91d-251d-470a-a062-fa1922dfa9a8&#x27;; DEVICE_INFORMATION_SERVICE = &#x27;0000180a-0000-1000-8000-00805f9b34fb&#x27;; TEMPERATURE_SERVICE = &#x27;e95d6100-251d-470a-a062-fa1922dfa9a8&#x27;; // characteristic UUIDs ACCELEROMETER_DATA = &#x27;e95dca4b-251d-470a-a062-fa1922dfa9a8&#x27;; LED_MATRIX_STATE = &#x27;e95d7b77-251d-470a-a062-fa1922dfa9a8&#x27;; MODEL_NUMBER_STRING = &#x27;00002a24-0000-1000-8000-00805f9b34fb&#x27;; TEM_TEMPERATURE = &#x27;e95d1b25-251d-470a-a062-fa1922dfa9a8&#x27;; // cached characteristics var accelerometer_data; var led_matrix_state; var model_number_string; var accelerometer_data; var tem_temperature; // var service_count; var services_discovered; var characteristics_discovered; var characteristic_count ; function discoverOrdisconnectDevices() &#123; console.log(&quot;discoverOrdisconnectDevices&quot;); if(!connected) discoverDevices(); else &#123; selected_device.gatt.disconnect(); &#125; &#125; function onDisconnected() &#123; console.log(&quot;onDisconnected&quot;); resetUI(); &#125; //function input.temperature(): number; function discoverDevices() &#123; console.log(&quot;discoverDevices&quot;); var options = &#123;acceptAllDevices:true, optionalServices: [DEVICE_INFORMATION_SERVICE, ACCELEROMETER_SERVICE, LED_SERVICE,TEMPERATURE_SERVICE] //在第5节课上添加 &#125; //发现所有周边蓝牙设备 navigator.bluetooth.requestDevice(options) .then(device =&gt; &#123; console.log(&#x27;&gt; Name:&#x27; + device.name); console.log(&#x27;&gt; Id:&#x27; + device.id); console.log(&#x27;&gt; Connected:&#x27; + device.gatt.connected); selected_device = device; console.log(selected_device); connect(); &#125;) .catch(error =&gt; &#123; alert(&#x27;ERROR&#x27; +error); console.log(&#x27;ERROR&#x27; +error); &#125;); &#125; function connect() &#123; console.log(&quot;connecting&quot;); selected_device.gatt.connect() .then( function (server) &#123; console.log(&quot;Connected to&quot; + server.device.id); console.log(&quot;Connected &quot; + server.connected); selected_device.addEventListener(&#x27;gattserverdisconnected&#x27;,onDisconnected); connected_server =server; discoverSvcsAndChars(); //在第5课基础上添加的函数 setConnectedStatus(true); &#125;, function (error) &#123; console.log(&quot;ERROR:could not connct-&quot; + error); alert(&quot;ERROR:could not connct-&quot; + error); setConnectedStatus(false); &#125; ); &#125; function setConnectedStatus(status) &#123; connected=status; document.getElementById(&#x27;status_connected&#x27;).innerHTML = status; if(status==true) &#123; document.getElementById(&#x27;btn_scan&#x27;).innerHTML = &quot;Disconnect&quot;; &#125; else &#123; document.getElementById(&#x27;btn_scan&#x27;).innerHTML = &quot;Discover Devices&quot;; &#125; &#125; function setDiscoveryStatus(status) &#123; services_discovered=status; document.getElementById(&#x27;status_discovered&#x27;).innerHTML=status; &#125; function resetUI() &#123; setConnectedStatus(false); &#125; function discoverSvcsAndChars() //在第5课基础上添加的函数 &#123; console.log(&quot;discoverSvcsAndChars server=&quot; + connected_server); connected_server.getPrimaryServices() .then(services =&gt; &#123; has_accelerometer_service = false; has_led_service = false; has_device_information_service = false; has_temperature_service= false; services_discovered = 0; service_count = services.length; console.log(&quot;Got &quot; + service_count + &quot; services&quot;); services.forEach(service =&gt; &#123; if (service.uuid == ACCELEROMETER_SERVICE) &#123; has_accelerometer_service = true; &#125; if (service.uuid == LED_SERVICE) &#123; has_led_service = true; &#125; if (service.uuid == DEVICE_INFORMATION_SERVICE) &#123; has_device_information_service = true; &#125; if (service.uuid == TEMPERATURE_SERVICE) //温度 &#123; has_temperature_service = true; &#125; console.log(&#x27;Getting Characteristics for service &#x27; + service.uuid); service.getCharacteristics() .then(characteristics =&gt; &#123; console.log(&#x27;&gt; Service: &#x27; + service.uuid); services_discovered++; characteristics_discovered = 0; characteristic_count = characteristics.length; characteristics.forEach(characteristic =&gt; &#123; characteristics_discovered++; console.log(&#x27;&gt;&gt; Characteristic: &#x27; + characteristic.uuid); if (characteristic.uuid == ACCELEROMETER_DATA) &#123; accelerometer_data = characteristic; has_accelerometer_data = true; &#125; if (characteristic.uuid == LED_MATRIX_STATE) &#123; led_matrix_state = characteristic; has_led_matrix_state = true; &#125; if (characteristic.uuid == MODEL_NUMBER_STRING) &#123; model_number_string = characteristic; has_model_name_string = true; &#125; if(characteristic.uuid == TEM_TEMPERATURE) //温度 &#123; tem_temperature = characteristic; has_tem_temperature = true; &#125; if (services_discovered == service_count &amp;&amp; characteristics_discovered == characteristic_count) &#123; console.log(&quot;FINISHED DISCOVERY&quot;); setDiscoveryStatus(true); //setDiscoveryStatus(true); &#125; &#125;); &#125;); &#125;); &#125;); &#125; function randomLEDs() //第6课上添加 &#123; console.log(&quot;randomLEDs&quot;); // state validation if (!connected) &#123; alert(&quot;Error: Discover and connect to a device before using this function&quot;); return; &#125; if (!services_discovered) &#123; alert(&quot;Error: Service discovery has not yet completed&quot;); return; &#125; if (!has_led_service) &#123; alert(&quot;Error: The connected device does not contain the LED service&quot;); return; &#125; if (!has_led_matrix_state) &#123; alert(&quot;Error: The connected device does not contain the LED matrix state characteristic&quot;); return; &#125; var led_array = [0, 0, 0, 0, 0]; // Math.random():0~1 Math.floor(x):返回小于等于x的最大整数 led_array[0] =10; led_array[1] = 31; led_array[2] = 31; led_array[3] = 14; led_array[4] = 4; /*led_array[0] = 31; led_array[1] = 17; led_array[2] = 17; led_array[3] = 17; led_array[4] = 31; */ var led_matrix_data = new Uint8Array(led_array); led_matrix_state.writeValue(led_matrix_data.buffer) .then(_ =&gt; &#123; console.log(&#x27;LED matrix state changed&#x27;); &#125;) .catch(error =&gt; &#123; console.log(&#x27;Error: &#x27; + error); alert(&#x27;Error: &#x27; + error); return; &#125;); &#125; function readModelNumber() &#123; console.log(&quot;readModelNumber&quot;); // state validation if (!connected) &#123; alert(&quot;Error: Discover and connect to a device before using this function&quot;); return; &#125; if (!services_discovered) &#123; alert(&quot;Error: Service discovery has not yet completed&quot;); return; &#125; if (!has_device_information_service) &#123; alert(&quot;Error: The connected device does not contain the device information service&quot;); return; &#125; if (!has_model_name_string) &#123; alert(&quot;Error: The connected device does not contain the model name string characteristic&quot;); return; &#125; model_number_string.readValue() .then(value =&gt; &#123; data = new Uint8Array(value.buffer); model_number_string = new TextDecoder(&quot;utf-8&quot;).decode(data); console.log(model_number_string); document.getElementById(&quot;model_number&quot;).innerHTML = model_number_string; &#125;) .catch(error =&gt; &#123; console.log(&#x27;Error: &#x27; + error); alert(&#x27;Error: &#x27; + error); return; &#125;); &#125; &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;h2&gt; Status &lt;/h2&gt; &lt;table border=&quot;1&quot;&gt; &lt;tr&gt; &lt;td&gt; &lt;b&gt;Connected&lt;/b&gt; &lt;/td&gt; &lt;td&gt; &lt;b&gt;Service Discovery Completed&lt;/b&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td id=&quot;status_connected&quot;&gt; false &lt;/td&gt; &lt;td id=&quot;status_discovered&quot;&gt; false &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;hr&gt; &lt;h2&gt; Device Discovery or Disconnect &lt;/h2&gt; &lt;button id = &quot;btn_scan&quot; onclick=&quot;discoverOrdisconnectDevices()&quot;&gt;Start scan&lt;/button&gt; &lt;hr&gt; &lt;h2&gt;Reading and Writing&lt;/h2&gt; &lt;h3&gt;Write Characteristic - Randomise Lights&lt;/h3&gt; &lt;button id=&quot;btn_write&quot; onclick=&quot;randomLEDs()&quot;&gt;Randomise LEDs&lt;/button&gt; &lt;h3&gt;Read Characteristic - Model number&lt;/h3&gt; &lt;button id=&quot;btn_read&quot; onclick=&quot;readModelNumber()&quot;&gt;Read Model number&lt;/button&gt; &lt;div id=&quot;model_number&quot;&gt;&lt;/div&gt; &lt;hr&gt; &lt;/body&gt;&lt;/html&gt; 网页蓝牙就可以成功显示温度相关服务和特性了。","categories":[],"tags":[]},{"title":"网页如何显示连接蓝牙设备","slug":"网页如何显示连接蓝牙设备","date":"2020-09-15T10:20:17.000Z","updated":"2020-09-20T10:10:44.525Z","comments":true,"path":"2020/09/15/网页如何显示连接蓝牙设备/","link":"","permalink":"https://lgx06.github.io/2020/09/15/%E7%BD%91%E9%A1%B5%E5%A6%82%E4%BD%95%E6%98%BE%E7%A4%BA%E8%BF%9E%E6%8E%A5%E8%93%9D%E7%89%99%E8%AE%BE%E5%A4%87/","excerpt":"","text":"首先，让我们先了解下今天要学习的东西。 网页蓝牙：通过渐进式 Web 应用（Progressive Web Apps）技术，你可以开发成熟的 Web 应用。 得益于大量新规范和新功能，以前需要在本机执行的应用，现在可以基于 Web 实现。 不过迄今为止，与硬件设备的交互仍然是遥不可及。 过去几年在浏览器中实现的新规范和功能的数量都是惊人的，我们已经有了处理3D的规范，例如WebGL和即将推出的WebGPU，我们可以流式传输和生成音频，观看视频并将网络摄像头用作输入设备，其实我们还可以使用WebAssembly以几乎原生的速度运行代码。 长期以来我们一直试图解决的一个问题：网络非常适合与服务器通信，但不适合与设备通信。 Micro:bit是由英国BBC公司推出的面向青少年编程教育的微型计算机，这一块小板子上集成了加速度传感器，磁力传感器，两个可编程按钮，25个单色led，蓝牙等常用传感器设备，采用micro usb口供电，可外接电池盒，在底部还有多个环孔连接器，可用于控制外接设备。 别看它面积小，但功能都很齐全哦 一、开始的准备工作 二、测试 先将板子通过USB口接到电脑上。 到官网下载测试程序。 https://makecode.microbit.org/v0/89975-20684-84568-20127 下好程序后，将程序拖入到板子的盘里。这时候，程序会消失，不用担心，这是正常现象，板子上会滚动显示 “Hi !”这表明连接本机成功。 三、用程序实现蓝牙控制板子的断和连 相关程序，这里面有用到后面几节课的读写功能。 var selected_device; // 保存用户选择的蓝牙设备 var connected_server; //在第二课基础上添加的变量，保存用户连接的蓝牙设备 var connected=false; //在第三课基础上添加的变量，保存电脑蓝牙的当前连接设备//在第5课上添加以下内容 // presence of services and characteristics var has_accelerometer_service = false; var has_accelerometer_data = false; var has_led_service = false; var has_led_matrix_state = false; var has_device_information_service = false; var has_model_name_string = false; // service UUIDs ACCELEROMETER_SERVICE = &#x27;e95d0753-251d-470a-a062-fa1922dfa9a8&#x27;; LED_SERVICE = &#x27;e95dd91d-251d-470a-a062-fa1922dfa9a8&#x27;; DEVICE_INFORMATION_SERVICE = &#x27;0000180a-0000-1000-8000-00805f9b34fb&#x27;; // characteristic UUIDs ACCELEROMETER_DATA = &#x27;e95dca4b-251d-470a-a062-fa1922dfa9a8&#x27;; LED_MATRIX_STATE = &#x27;e95d7b77-251d-470a-a062-fa1922dfa9a8&#x27;; MODEL_NUMBER_STRING = &#x27;00002a24-0000-1000-8000-00805f9b34fb&#x27;; // cached characteristics var accelerometer_data; var led_matrix_state; var model_number_string; // var service_count; var services_discovered; var characteristics_discovered; var characteristic_count ; function discoverOrdisconnectDevices() //在第四课基础上添加的函数 &#123; console.log(&quot;discoverDevicesOrDisconnect&quot;); if(!connected) discoverDevices(); else &#123; selected_device.gatt.disconnext(); &#125; &#125; function onDisconnected() //在第四课基础上添加的函数 &#123; console.log(&quot;onDisconnected&quot;) resetUI(); &#125; function discoverDevices() &#123; var options = &#123;acceptAllDevices:true, optionalServices: [DEVICE_INFORMATION_SERVICE, ACCELEROMETER_SERVICE, LED_SERVICE] //在第5节课上添加 &#125; //发现所有周边蓝牙设备 console.log(&quot;discoverDevices&quot;); // var options = &#123;acceptAllDevices:true&#125; //发现所有周边蓝牙设备 navigator.bluetooth.requestDevice(options) .then(device =&gt; &#123; console.log(&#x27;&gt; Name: &#x27; + device.name); console.log(&#x27;&gt; Id: &#x27; + device.id); console.log(&#x27;&gt; Connected: &#x27; + device.gatt.connected); selected_device = device; console.log(selected_device); connect(); &#125;) .catch(error =&gt;&#123; alert(&#x27;ERROR:&#x27; +error); console.log(&#x27;ERROR:&#x27; +error); &#125;); &#125; function connect() &#123; console.log(&quot;connecting&quot;); selected_device.gatt.connect() .then( function(server) //表示连接成功 &#123; console.log(&quot;Connected to&quot; + server.device.id); console.log(&quot;Connected=&quot; + server.connected); selected_device.addEventListener(&#x27;gattserverdisconnected&#x27;,onDisconnected); connected_server = server; discoverSvcsAndChars(); setConnectedStatus(true); &#125;, function(error) //表示连接失败 &#123; console.log(&quot;ERROR:could not connct-&quot; + error); alert(&quot;ERROR:could not connct-&quot; + error); setConnectedStatus(false); &#125; ); &#125; function setConnectedStatus(status) &#123; connected=status; document.getElementById(&#x27;status_connected&#x27;).innerHTML=status; if(status==true) &#123; document.getElementById(&#x27;btn_scan&#x27;).innerHTML=&quot;Disconnect&quot;; &#125; else &#123; document.getElementById(&#x27;btn_scan&#x27;).innerHTML=&quot;Discover Devices&quot;; &#125; &#125; function resetUI() &#123; setConnectedStatus(false); &#125; function discoverSvcsAndChars() //在第5课基础上添加的函数 &#123; console.log(&quot;discoverSvcsAndChars server=&quot; + connected_server); connected_server.getPrimaryServices() .then(services =&gt; &#123; has_accelerometer_service = false; has_led_service = false; has_device_information_service = false; services_discovered = 0; service_count = services.length; console.log(&quot;Got &quot; + service_count + &quot; services&quot;); services.forEach(service =&gt; &#123; if (service.uuid == ACCELEROMETER_SERVICE) &#123; has_accelerometer_service = true; &#125; if (service.uuid == LED_SERVICE) &#123; has_led_service = true; &#125; if (service.uuid == DEVICE_INFORMATION_SERVICE) &#123; has_device_information_service = true; &#125; console.log(&#x27;Getting Characteristics for service &#x27; + service.uuid); service.getCharacteristics() .then(characteristics =&gt; &#123; console.log(&#x27;&gt; Service: &#x27; + service.uuid); services_discovered++; characteristics_discovered = 0; characteristic_count = characteristics.length; characteristics.forEach(characteristic =&gt; &#123; characteristics_discovered++; console.log(&#x27;&gt;&gt; Characteristic: &#x27; + characteristic.uuid); if (characteristic.uuid == ACCELEROMETER_DATA) &#123; accelerometer_data = characteristic; has_accelerometer_data = true; &#125; if (characteristic.uuid == LED_MATRIX_STATE) &#123; led_matrix_state = characteristic; has_led_matrix_state = true; &#125; if (characteristic.uuid == MODEL_NUMBER_STRING) &#123; model_number_string = characteristic; has_model_name_string = true; &#125; if (services_discovered == service_count &amp;&amp; characteristics_discovered == characteristic_count) &#123; console.log(&quot;FINISHED DISCOVERY&quot;); // setDiscoveryStatus(true); //setDiscoveryStatus(true); &#125; &#125;); &#125;); &#125;); &#125;);&#125; 测试 打开测试网址，有以下效果即成功。","categories":[],"tags":[]},{"title":"网页控制行列","slug":"网页控制行列","date":"2020-09-15T10:20:07.000Z","updated":"2020-09-20T10:10:44.597Z","comments":true,"path":"2020/09/15/网页控制行列/","link":"","permalink":"https://lgx06.github.io/2020/09/15/%E7%BD%91%E9%A1%B5%E6%8E%A7%E5%88%B6%E8%A1%8C%E5%88%97/","excerpt":"","text":"本章任务 用网页控制矩阵上的行和列 相关代码&lt;html&gt; &lt;head&gt; &lt;script&gt; var selected_device; //选择设备 var connected_server; //连接设备 var connected=false;//连接状态 var services_discovered=false;//发现设备状态 // 添加服务和特性状态变量 var has_accelerometer_service = false; //加速度服务状态 var has_accelerometer_data = false; //加速度特性状态 var has_led_service = false;//led服务状态 var has_led_matrix_state = false; //led控制特性状态 var has_device_information_service = false; //设备信息服务状态 var has_model_name_string = false; //设备信息特性状态 var has_temperature_service =false; //温度服务状态 var has_tem_temperature = false; //温度特性状态 // 服务 UUIDs ACCELEROMETER_SERVICE = &#x27;e95d0753-251d-470a-a062-fa1922dfa9a8&#x27;; LED_SERVICE = &#x27;e95dd91d-251d-470a-a062-fa1922dfa9a8&#x27;; DEVICE_INFORMATION_SERVICE = &#x27;0000180a-0000-1000-8000-00805f9b34fb&#x27;; TEMPERATURE_SERVICE = &#x27;e95d6100-251d-470a-a062-fa1922dfa9a8&#x27;; // 特性 UUIDs ACCELEROMETER_DATA = &#x27;e95dca4b-251d-470a-a062-fa1922dfa9a8&#x27;; LED_MATRIX_STATE = &#x27;e95d7b77-251d-470a-a062-fa1922dfa9a8&#x27;; MODEL_NUMBER_STRING = &#x27;00002a24-0000-1000-8000-00805f9b34fb&#x27;; TEM_TEMPERATURE = &#x27;e95d1b25-251d-470a-a062-fa1922dfa9a8&#x27;; // 添加特性变量 var led_matrix_state; var model_number_string; var accelerometer_data; var tem_temperature; //添加服务，特性相关参数 var service_count; var services_discovered; var characteristics_discovered; var characteristic_count ; function discoverOrdisconnectDevices()// 断开连接 &#123; console.log(&quot;discoverOrdisconnectDevices&quot;); if(!connected) discoverDevices(); else &#123; selected_device.gatt.disconnect(); &#125; &#125; function onDisconnected()//连接 &#123; console.log(&quot;onDisconnected&quot;); resetUI(); &#125;//function input.temperature(): number; function discoverDevices()// 搜索设备函数 &#123; console.log(&quot;discoverDevices&quot;); var options = &#123;acceptAllDevices:true, optionalServices: [DEVICE_INFORMATION_SERVICE, ACCELEROMETER_SERVICE, LED_SERVICE,TEMPERATURE_SERVICE] //在第5节课上添加 &#125; //发现所有周边蓝牙设备 navigator.bluetooth.requestDevice(options) .then(device =&gt; &#123; console.log(&#x27;&gt; Name:&#x27; + device.name); console.log(&#x27;&gt; Id:&#x27; + device.id); console.log(&#x27;&gt; Connected:&#x27; + device.gatt.connected); selected_device = device; console.log(selected_device); connect(); &#125;) .catch(error =&gt; &#123; alert(&#x27;ERROR&#x27; +error); console.log(&#x27;ERROR&#x27; +error); &#125;); &#125; function connect() //连接函数 &#123; console.log(&quot;connecting&quot;); selected_device.gatt.connect() .then( function (server) &#123; console.log(&quot;Connected to&quot; + server.device.id); console.log(&quot;Connected &quot; + server.connected); selected_device.addEventListener(&#x27;gattserverdisconnected&#x27;,onDisconnected); connected_server =server; discoverSvcsAndChars(); //在第5课基础上添加的函数 setConnectedStatus(true); &#125;, function (error) &#123; console.log(&quot;ERROR:could not connct-&quot; + error); alert(&quot;ERROR:could not connct-&quot; + error); setConnectedStatus(false); &#125; ); &#125; function setConnectedStatus(status)//设置连接状态 &#123; connected=status; document.getElementById(&#x27;status_connected&#x27;).innerHTML = status; if(status==true) &#123; document.getElementById(&#x27;btn_scan&#x27;).innerHTML = &quot;Disconnect&quot;; &#125; else &#123; document.getElementById(&#x27;btn_scan&#x27;).innerHTML = &quot;Discover Devices&quot;; &#125; &#125; function setDiscoveryStatus(status)//设置发现状态 &#123; services_discovered=status; document.getElementById(&#x27;status_discovered&#x27;).innerHTML=status; &#125; function resetUI() //重置页面 &#123; setConnectedStatus(false); &#125; function discoverSvcsAndChars() //发现服务和特性 &#123; console.log(&quot;discoverSvcsAndChars server=&quot; + connected_server); connected_server.getPrimaryServices() .then(services =&gt; &#123; has_accelerometer_service = false; has_led_service = false; has_device_information_service = false; has_temperature_service= false; services_discovered = 0; service_count = services.length; console.log(&quot;Got &quot; + service_count + &quot; services&quot;); services.forEach(service =&gt; &#123; if (service.uuid == ACCELEROMETER_SERVICE) &#123; has_accelerometer_service = true; &#125; if (service.uuid == LED_SERVICE) &#123; has_led_service = true; &#125; if (service.uuid == DEVICE_INFORMATION_SERVICE) &#123; has_device_information_service = true; &#125; if (service.uuid == TEMPERATURE_SERVICE) //温度 &#123; has_temperature_service = true; &#125; console.log(&#x27;Getting Characteristics for service &#x27; + service.uuid); service.getCharacteristics() .then(characteristics =&gt; &#123; console.log(&#x27;&gt; Service: &#x27; + service.uuid); services_discovered++; characteristics_discovered = 0; characteristic_count = characteristics.length; characteristics.forEach(characteristic =&gt; &#123; characteristics_discovered++; console.log(&#x27;&gt;&gt; Characteristic: &#x27; + characteristic.uuid); if (characteristic.uuid == ACCELEROMETER_DATA) &#123; accelerometer_data = characteristic; has_accelerometer_data = true; &#125; if (characteristic.uuid == LED_MATRIX_STATE) &#123; led_matrix_state = characteristic; has_led_matrix_state = true; &#125; if (characteristic.uuid == MODEL_NUMBER_STRING) &#123; model_number_string = characteristic; has_model_name_string = true; &#125; if(characteristic.uuid == TEM_TEMPERATURE) //温度 &#123; tem_temperature = characteristic; has_tem_temperature = true; &#125; if (services_discovered == service_count &amp;&amp; characteristics_discovered == characteristic_count) &#123; console.log(&quot;FINISHED DISCOVERY&quot;); setDiscoveryStatus(true); //setDiscoveryStatus(true); &#125; &#125;); &#125;); &#125;); &#125;); &#125; var i=0,j=0; function randomLEDs(ct) //控制led &#123; console.log(&quot;randomLEDs&quot;); // state validation if (!connected) &#123; alert(&quot;Error: Discover and connect to a device before using this function&quot;); return; &#125; if (!services_discovered) &#123; alert(&quot;Error: Service discovery has not yet completed&quot;); return; &#125; if (!has_led_service) &#123; alert(&quot;Error: The connected device does not contain the LED service&quot;); return; &#125; if (!has_led_matrix_state) &#123; alert(&quot;Error: The connected device does not contain the LED matrix state characteristic&quot;); return; &#125; var led_array=[]; if(ct==0) &#123; led_array[0] = 1&lt;&lt;i; led_array[1] = 1&lt;&lt;i; led_array[2] = 1&lt;&lt;i; led_array[3] = 1&lt;&lt;i; led_array[4] = 1&lt;&lt;i; i++; if(i==5)i=0; &#125; else if(ct==1) &#123; led_array[0] = 0; led_array[1] = 0; led_array[2] = 0; led_array[3] = 0; led_array[4] = 0; led_array[j] = 31; j++; if(j==5)j=0; &#125; // Math.random():0~1 Math.floor(x):返回小于等于x的最大整数 /*led_array[0] =10; led_array[1] = 31; led_array[2] = 31; led_array[3] = 14; led_array[4] = 4;*/ /*led_array[0] = 31; led_array[1] = 17; led_array[2] = 17; led_array[3] = 17; led_array[4] = 31; */ var led_matrix_data = new Uint8Array(led_array); led_matrix_state.writeValue(led_matrix_data.buffer) .then(_ =&gt; &#123; console.log(&#x27;LED matrix state changed&#x27;); &#125;) .catch(error =&gt; &#123; console.log(&#x27;Error: &#x27; + error); alert(&#x27;Error: &#x27; + error); return; &#125;); &#125; function readModelNumber() // 蓝牙信息服务&#123; console.log(&quot;readModelNumber&quot;); // state validation if (!connected) &#123; alert(&quot;Error: Discover and connect to a device before using this function&quot;); return; &#125; if (!services_discovered) &#123; alert(&quot;Error: Service discovery has not yet completed&quot;); return; &#125; if (!has_device_information_service) &#123; alert(&quot;Error: The connected device does not contain the device information service&quot;); return; &#125; if (!has_model_name_string) &#123; alert(&quot;Error: The connected device does not contain the model name string characteristic&quot;); return; &#125; model_number_string.readValue() .then(value =&gt; &#123; data = new Uint8Array(value.buffer); model_number_string = new TextDecoder(&quot;utf-8&quot;).decode(data); console.log(model_number_string); document.getElementById(&quot;model_number&quot;).innerHTML = model_number_string; &#125;) .catch(error =&gt; &#123; console.log(&#x27;Error: &#x27; + error); alert(&#x27;Error: &#x27; + error); return; &#125;); &#125; function accelerometer() //加速度传感器&#123; console.log(&quot;accelerometer&quot;); // state validation if (!connected) &#123; alert(&quot;Error: Discover and connect to a device before using this function&quot;); return; &#125; if (!services_discovered) &#123; alert(&quot;Error: Service discovery has not yet completed&quot;); return; &#125; if (!has_accelerometer_service) &#123; alert(&quot;Error: The connected device does not contain the accelerometer service&quot;); return; &#125; if (!has_accelerometer_data) &#123; alert(&quot;Error: The connected device does not contain the accelerometer_data characteristic&quot;); return; &#125; accelerometer_data.readValue() .then(value =&gt; &#123; buffer = value.buffer; dataview = new DataView(buffer); X = dataview.getUint16(0, true); Y = dataview.getUint16(2, true); Z = dataview.getUint16(4, true); console.log(&quot;X=&quot; + X + &quot;, Y=&quot; + Y + &quot;, Z+&quot; + Z); document.getElementById(&quot;ac_data&quot;).innerHTML = &quot;X=&quot; + X + &quot;, Y=&quot; + Y + &quot;,Z=&quot; + Z; &#125;) .catch(error =&gt; &#123; console.log(&#x27;Error: &#x27; + error); alert(&#x27;Error: &#x27; + error); return; &#125;); &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;h2&gt; Status &lt;/h2&gt; &lt;table border=&quot;1&quot;&gt; &lt;tr&gt; &lt;td&gt; &lt;b&gt;Connected&lt;/b&gt; &lt;/td&gt; &lt;td&gt; &lt;b&gt;Service Discovery Completed&lt;/b&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td id=&quot;status_connected&quot;&gt; false &lt;/td&gt; &lt;td id=&quot;status_discovered&quot;&gt; false &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;hr&gt; &lt;h2&gt; Device Discovery or Disconnect &lt;/h2&gt; &lt;button id = &quot;btn_scan&quot; onclick=&quot;discoverOrdisconnectDevices()&quot;&gt;Start scan&lt;/button&gt; &lt;hr&gt; &lt;h2&gt;Reading and Writing&lt;/h2&gt; &lt;h3&gt;Write Characteristic - Randomise Lights&lt;/h3&gt; &lt;button id=&quot;btn_write&quot; onclick=&quot;randomLEDs(0)&quot;&gt;控制led行&lt;/button&gt; &lt;button id=&quot;btu_write&quot; onclick=&quot;randomLEDs(1)&quot;&gt;控制led列&lt;/button&gt; &lt;h3&gt;Read Characteristic - Model number&lt;/h3&gt; &lt;button id=&quot;btn_read&quot; onclick=&quot;readModelNumber()&quot;&gt;Read Model number&lt;/button&gt; &lt;div id=&quot;model_number&quot;&gt;&lt;/div&gt; &lt;h3&gt;accelerometer_data&lt;/h3&gt; &lt;button id=&quot;btn_readAC&quot; onclick=&quot;accelerometer()&quot;&gt;Read accelerometer_data&lt;/button&gt; &lt;div id=&quot;ac_data&quot;&gt;&lt;/div&gt; &lt;hr&gt;&lt;/body&gt;&lt;/html&gt; 执行代码，浏览器会显示以下效果： 点击控制行和列，板子会相应出现不同的显示。","categories":[],"tags":[]},{"title":"读写特性","slug":"读写特性","date":"2020-09-15T10:19:57.000Z","updated":"2020-09-20T10:10:44.741Z","comments":true,"path":"2020/09/15/读写特性/","link":"","permalink":"https://lgx06.github.io/2020/09/15/%E8%AF%BB%E5%86%99%E7%89%B9%E6%80%A7/","excerpt":"","text":"本节任务 通过读写特性读取BBC板名称 控制LED灯的显示 相关代码&lt;html&gt; &lt;head&gt; &lt;script&gt; var selected_device; var connected_server; var connected=false; var services_discovered=false; //在第5课上添加以下内容 // presence of services and characteristics var has_accelerometer_service = false; var has_accelerometer_data = false; var has_led_service = false; var has_led_matrix_state = false; var has_device_information_service = false; var has_model_name_string = false; var has_temperature_service =false; //温度 var has_tem_temperature = false; // service UUIDs ACCELEROMETER_SERVICE = &#x27;e95d0753-251d-470a-a062-fa1922dfa9a8&#x27;; LED_SERVICE = &#x27;e95dd91d-251d-470a-a062-fa1922dfa9a8&#x27;; DEVICE_INFORMATION_SERVICE = &#x27;0000180a-0000-1000-8000-00805f9b34fb&#x27;; TEMPERATURE_SERVICE = &#x27;e95d6100-251d-470a-a062-fa1922dfa9a8&#x27;; // characteristic UUIDs ACCELEROMETER_DATA = &#x27;e95dca4b-251d-470a-a062-fa1922dfa9a8&#x27;; LED_MATRIX_STATE = &#x27;e95d7b77-251d-470a-a062-fa1922dfa9a8&#x27;; MODEL_NUMBER_STRING = &#x27;00002a24-0000-1000-8000-00805f9b34fb&#x27;; TEM_TEMPERATURE = &#x27;e95d1b25-251d-470a-a062-fa1922dfa9a8&#x27;; // cached characteristics var accelerometer_data; var led_matrix_state; var model_number_string; var accelerometer_data; var tem_temperature; // var service_count; var services_discovered; var characteristics_discovered; var characteristic_count ; function discoverOrdisconnectDevices() &#123; console.log(&quot;discoverOrdisconnectDevices&quot;); if(!connected) discoverDevices(); else &#123; selected_device.gatt.disconnect(); &#125; &#125; function onDisconnected() &#123; console.log(&quot;onDisconnected&quot;); resetUI(); &#125; //function input.temperature(): number; function discoverDevices() &#123; console.log(&quot;discoverDevices&quot;); var options = &#123;acceptAllDevices:true, optionalServices: [DEVICE_INFORMATION_SERVICE, ACCELEROMETER_SERVICE, LED_SERVICE,TEMPERATURE_SERVICE] //在第5节课上添加 &#125; //发现所有周边蓝牙设备 navigator.bluetooth.requestDevice(options) .then(device =&gt; &#123; console.log(&#x27;&gt; Name:&#x27; + device.name); console.log(&#x27;&gt; Id:&#x27; + device.id); console.log(&#x27;&gt; Connected:&#x27; + device.gatt.connected); selected_device = device; console.log(selected_device); connect(); &#125;) .catch(error =&gt; &#123; alert(&#x27;ERROR&#x27; +error); console.log(&#x27;ERROR&#x27; +error); &#125;); &#125; function connect() &#123; console.log(&quot;connecting&quot;); selected_device.gatt.connect() .then( function (server) &#123; console.log(&quot;Connected to&quot; + server.device.id); console.log(&quot;Connected &quot; + server.connected); selected_device.addEventListener(&#x27;gattserverdisconnected&#x27;,onDisconnected); connected_server =server; discoverSvcsAndChars(); //在第5课基础上添加的函数 setConnectedStatus(true); &#125;, function (error) &#123; console.log(&quot;ERROR:could not connct-&quot; + error); alert(&quot;ERROR:could not connct-&quot; + error); setConnectedStatus(false); &#125; ); &#125; function setConnectedStatus(status) &#123; connected=status; document.getElementById(&#x27;status_connected&#x27;).innerHTML = status; if(status==true) &#123; document.getElementById(&#x27;btn_scan&#x27;).innerHTML = &quot;Disconnect&quot;; &#125; else &#123; document.getElementById(&#x27;btn_scan&#x27;).innerHTML = &quot;Discover Devices&quot;; &#125; &#125; function setDiscoveryStatus(status) &#123; services_discovered=status; document.getElementById(&#x27;status_discovered&#x27;).innerHTML=status; &#125; function resetUI() &#123; setConnectedStatus(false); &#125; function discoverSvcsAndChars() //在第5课基础上添加的函数 &#123; console.log(&quot;discoverSvcsAndChars server=&quot; + connected_server); connected_server.getPrimaryServices() .then(services =&gt; &#123; has_accelerometer_service = false; has_led_service = false; has_device_information_service = false; has_temperature_service= false; services_discovered = 0; service_count = services.length; console.log(&quot;Got &quot; + service_count + &quot; services&quot;); services.forEach(service =&gt; &#123; if (service.uuid == ACCELEROMETER_SERVICE) &#123; has_accelerometer_service = true; &#125; if (service.uuid == LED_SERVICE) &#123; has_led_service = true; &#125; if (service.uuid == DEVICE_INFORMATION_SERVICE) &#123; has_device_information_service = true; &#125; if (service.uuid == TEMPERATURE_SERVICE) //温度 &#123; has_temperature_service = true; &#125; console.log(&#x27;Getting Characteristics for service &#x27; + service.uuid); service.getCharacteristics() .then(characteristics =&gt; &#123; console.log(&#x27;&gt; Service: &#x27; + service.uuid); services_discovered++; characteristics_discovered = 0; characteristic_count = characteristics.length; characteristics.forEach(characteristic =&gt; &#123; characteristics_discovered++; console.log(&#x27;&gt;&gt; Characteristic: &#x27; + characteristic.uuid); if (characteristic.uuid == ACCELEROMETER_DATA) &#123; accelerometer_data = characteristic; has_accelerometer_data = true; &#125; if (characteristic.uuid == LED_MATRIX_STATE) &#123; led_matrix_state = characteristic; has_led_matrix_state = true; &#125; if (characteristic.uuid == MODEL_NUMBER_STRING) &#123; model_number_string = characteristic; has_model_name_string = true; &#125; if(characteristic.uuid == TEM_TEMPERATURE) //温度 &#123; tem_temperature = characteristic; has_tem_temperature = true; &#125; if (services_discovered == service_count &amp;&amp; characteristics_discovered == characteristic_count) &#123; console.log(&quot;FINISHED DISCOVERY&quot;); setDiscoveryStatus(true); //setDiscoveryStatus(true); &#125; &#125;); &#125;); &#125;); &#125;); &#125; function randomLEDs() //第6课上添加 &#123; console.log(&quot;randomLEDs&quot;); // state validation if (!connected) &#123; alert(&quot;Error: Discover and connect to a device before using this function&quot;); return; &#125; if (!services_discovered) &#123; alert(&quot;Error: Service discovery has not yet completed&quot;); return; &#125; if (!has_led_service) &#123; alert(&quot;Error: The connected device does not contain the LED service&quot;); return; &#125; if (!has_led_matrix_state) &#123; alert(&quot;Error: The connected device does not contain the LED matrix state characteristic&quot;); return; &#125; var led_array = [0, 0, 0, 0, 0]; // Math.random():0~1 Math.floor(x):返回小于等于x的最大整数 led_array[0] =10; led_array[1] = 31; led_array[2] = 31; led_array[3] = 14; led_array[4] = 4; /*led_array[0] = 31; led_array[1] = 17; led_array[2] = 17; led_array[3] = 17; led_array[4] = 31; */ var led_matrix_data = new Uint8Array(led_array); led_matrix_state.writeValue(led_matrix_data.buffer) .then(_ =&gt; &#123; console.log(&#x27;LED matrix state changed&#x27;); &#125;) .catch(error =&gt; &#123; console.log(&#x27;Error: &#x27; + error); alert(&#x27;Error: &#x27; + error); return; &#125;); &#125; function readModelNumber() &#123; console.log(&quot;readModelNumber&quot;); // state validation if (!connected) &#123; alert(&quot;Error: Discover and connect to a device before using this function&quot;); return; &#125; if (!services_discovered) &#123; alert(&quot;Error: Service discovery has not yet completed&quot;); return; &#125; if (!has_device_information_service) &#123; alert(&quot;Error: The connected device does not contain the device information service&quot;); return; &#125; if (!has_model_name_string) &#123; alert(&quot;Error: The connected device does not contain the model name string characteristic&quot;); return; &#125; model_number_string.readValue() .then(value =&gt; &#123; data = new Uint8Array(value.buffer); model_number_string = new TextDecoder(&quot;utf-8&quot;).decode(data); console.log(model_number_string); document.getElementById(&quot;model_number&quot;).innerHTML = model_number_string; &#125;) .catch(error =&gt; &#123; console.log(&#x27;Error: &#x27; + error); alert(&#x27;Error: &#x27; + error); return; &#125;); &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;h2&gt; Status &lt;/h2&gt; &lt;table border=&quot;1&quot;&gt; &lt;tr&gt; &lt;td&gt; &lt;b&gt;Connected&lt;/b&gt; &lt;/td&gt; &lt;td&gt; &lt;b&gt;Service Discovery Completed&lt;/b&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td id=&quot;status_connected&quot;&gt; false &lt;/td&gt; &lt;td id=&quot;status_discovered&quot;&gt; false &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;hr&gt; &lt;h2&gt; Device Discovery or Disconnect &lt;/h2&gt; &lt;button id = &quot;btn_scan&quot; onclick=&quot;discoverOrdisconnectDevices()&quot;&gt;Start scan&lt;/button&gt; &lt;hr&gt; &lt;h2&gt;Reading and Writing&lt;/h2&gt; &lt;h3&gt;Write Characteristic - Randomise Lights&lt;/h3&gt; &lt;button id=&quot;btn_write&quot; onclick=&quot;randomLEDs()&quot;&gt;Randomise LEDs&lt;/button&gt; &lt;h3&gt;Read Characteristic - Model number&lt;/h3&gt; &lt;button id=&quot;btn_read&quot; onclick=&quot;readModelNumber()&quot;&gt;Read Model number&lt;/button&gt; &lt;div id=&quot;model_number&quot;&gt;&lt;/div&gt; &lt;hr&gt;&lt;/body&gt;&lt;/html&gt; 打开网页我们会发现以下效果： 具体的自己观察板子。","categories":[],"tags":[]}],"categories":[],"tags":[]}